-- MySQL dump 10.13  Distrib 5.5.31, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: myblog
-- ------------------------------------------------------
-- Server version	5.5.31-0ubuntu0.12.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `blogs`
--

DROP TABLE IF EXISTS `blogs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blogs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `content` text COLLATE utf8_unicode_ci,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_blogs_on_user_id` (`user_id`),
  KEY `index_blogs_on_category_id` (`category_id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blogs`
--

LOCK TABLES `blogs` WRITE;
/*!40000 ALTER TABLE `blogs` DISABLE KEYS */;
INSERT INTO `blogs` VALUES (1,1,NULL,'MySQL 命令大全 – 命令详解','<p>\r\n	此文章转载自：http://sakyone.iteye.com/blog/422998\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	一、连接MYSQL。\r\n</p>\r\n<p>\r\n	格式： mysql -h主机地址 -u用户名 －p用户密码\r\n</p>\r\n<p>\r\n	1、例1：连接到本机上的MYSQL。\r\n</p>\r\n<p>\r\n	首先在打开DOS窗口，然后进入目录 mysqlbin，再键入命令mysql -uroot -p，回车后提示你输密码，如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是：mysql&gt;\r\n</p>\r\n<p>\r\n	2、例2：连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：\r\n</p>\r\n<p>\r\n	mysql -h110.110.110.110 -uroot -pabcd123\r\n</p>\r\n<p>\r\n	（注:u与root可以不用加空格，其它也一样）\r\n</p>\r\n<p>\r\n	3、退出MYSQL命令： exit （回车）\r\n</p>\r\n<p>\r\n	二、修改密码。\r\n</p>\r\n<p>\r\n	格式：mysqladmin -u用户名 -p旧密码 password 新密码\r\n</p>\r\n<p>\r\n	1、例1：给root加个密码ab12。首先在DOS下进入目录mysqlbin，然后键入以下命令\r\n</p>\r\n<p>\r\n	mysqladmin -uroot -password ab12\r\n</p>\r\n<p>\r\n	注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。\r\n</p>\r\n<p>\r\n	2、例2：再将root的密码改为djg345。\r\n</p>\r\n<p>\r\n	mysqladmin -uroot -pab12 password djg345\r\n</p>\r\n<p>\r\n	三、增加新用户。（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）\r\n</p>\r\n<p>\r\n	格式：grant select on 数据库.* to 用户名@登录主机 identified by \\”密码\\”\r\n</p>\r\n<p>\r\n	例1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入MYSQL，然后键入以下命令：\r\n</p>\r\n<p>\r\n	grant select,insert,update,delete on *.* to test1@\\”%\\” Identified by \\”abc\\”;\r\n</p>\r\n<p>\r\n	但例1增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见例2。\r\n</p>\r\n<p>\r\n	例2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查 \r\n询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从 \r\ninternet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。\r\n</p>\r\n<p>\r\n	grant select,insert,update,delete on mydb.* to test2@localhost identified by \\”abc\\”;\r\n</p>\r\n<p>\r\n	如果你不想test2有密码，可以再打一个命令将密码消掉。\r\n</p>\r\n<p>\r\n	grant select,insert,update,delete on mydb.* to test2@localhost identified by \\”\\”;\r\n</p>\r\n<p>\r\n	在上篇我们讲了登录、增加用户、密码更改等问题。下篇我们来看看MYSQL中有关数据库方面的操作。注意：你必须首先登录到MYSQL中，以下操作都是在MYSQL的提示符下进行的，而且每个命令以分号结束。\r\n</p>\r\n<p>\r\n	一、操作技巧\r\n</p>\r\n<p>\r\n	1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。\r\n</p>\r\n<p>\r\n	2、你可以使用光标上下键调出以前的命令。但以前我用过的一个MYSQL旧版本不支持。我现在用的是mysql-3.23.27-beta-win。\r\n</p>\r\n<p>\r\n	二、显示命令\r\n</p>\r\n<p>\r\n	1、显示数据库列表。\r\n</p>\r\n<p>\r\n	show databases;\r\n</p>\r\n<p>\r\n	刚开始时才两个数据库：mysql和test。mysql库很重要它里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。\r\n</p>\r\n<p>\r\n	2、显示库中的数据表：\r\n</p>\r\n<p>\r\n	use mysql； ／／打开库，学过FOXBASE的一定不会陌生吧\r\n</p>\r\n<p>\r\n	show tables;\r\n</p>\r\n<p>\r\n	3、显示数据表的结构：\r\n</p>\r\n<p>\r\n	describe 表名;\r\n</p>\r\n<p>\r\n	4、建库：\r\n</p>\r\n<p>\r\n	create database 库名;\r\n</p>\r\n<p>\r\n	5、建表：\r\n</p>\r\n<p>\r\n	use 库名；\r\n</p>\r\n<p>\r\n	create table 表名 (字段设定列表)；\r\n</p>\r\n<p>\r\n	6、删库和删表:\r\n</p>\r\n<p>\r\n	drop database 库名;\r\n</p>\r\n<p>\r\n	drop table 表名；\r\n</p>\r\n<p>\r\n	7、将表中记录清空：\r\n</p>\r\n<p>\r\n	delete from 表名;\r\n</p>\r\n<p>\r\n	8、显示表中的记录：\r\n</p>\r\n<p>\r\n	select * from 表名;\r\n</p>\r\n<p>\r\n	三、一个建库和建表以及插入数据的实例\r\n</p>\r\n<p>\r\n	drop database if exists school; //如果存在SCHOOL则删除\r\n</p>\r\n<p>\r\n	create database school; //建立库SCHOOL\r\n</p>\r\n<p>\r\n	use school; //打开库SCHOOL\r\n</p>\r\n<p>\r\n	create table teacher //建立表TEACHER\r\n</p>\r\n<p>\r\n	(\r\n</p>\r\n<p>\r\n	id int(3) auto_increment not null primary key,\r\n</p>\r\n<p>\r\n	name char(10) not null,\r\n</p>\r\n<p>\r\n	address varchar(50) default ’深圳’,\r\n</p>\r\n<p>\r\n	year date\r\n</p>\r\n<p>\r\n	); //建表结束\r\n</p>\r\n<p>\r\n	//以下为插入字段\r\n</p>\r\n<p>\r\n	insert into teacher values(’’,’glchengang’,’深圳一中’,’1976-10-10’);\r\n</p>\r\n<p>\r\n	insert into teacher values(’’,’jack’,’深圳一中’,’1975-12-23’);\r\n</p>\r\n<p>\r\n	注：在建表中（1）将ID设为长度为3的数字字段:int(3)并让它每个记录自动加 一:auto_increment并不能为空:not \r\nnull而且让他成为主字段primary \r\nkey（2）将NAME设为长度为10的字符字段（3）将ADDRESS设为长度50的字符字段，而且缺省值为深圳。varchar和char有什么区别\r\n 呢，只有等以后的文章再说了。（4）将YEAR设为日期字段。\r\n</p>\r\n<p>\r\n	如果你在mysql提示符键入上面的命令也可以，但不方便调试。你可以将以上命令原样写入一个文本文件中假设为school.sql，然后复制到c:\\\\下，并在DOS状态进入目录\\\\mysql\\\\bin，然后键入以下命令：\r\n</p>\r\n<p>\r\n	mysql -uroot -p密码 &lt; c:\\\\school.sql\r\n</p>\r\n<p>\r\n	如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。\r\n</p>\r\n<p>\r\n	四、将文本数据转到数据库中\r\n</p>\r\n<p>\r\n	1、文本数据应符合的格式：字段数据之间用tab键隔开，null值用\\\\n来代替.\r\n</p>\r\n<p>\r\n	例：\r\n</p>\r\n<p>\r\n	3 rose 深圳二中 1976-10-10\r\n</p>\r\n<p>\r\n	4 mike 深圳一中 1975-12-23\r\n</p>\r\n<p>\r\n	2、数据传入命令 load data local infile \\”文件名\\” into table 表名;\r\n</p>\r\n<p>\r\n	注意：你最好将文件复制到\\\\mysql\\\\bin目录下，并且要先用use命令打表所在的库。\r\n</p>\r\n<p>\r\n	五、备份数据库：（命令在DOS的\\\\mysql\\\\bin目录下执行）<br />\r\nmysqldump –opt school&gt;school.bbb\r\n</p>\r\n<p>\r\n	注释:将数据库school备份到school.bbb文件，school.bbb是一个文本文件，文件名任取，打开看看你会有新发现。\r\n</p>\r\n<p>\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	mysql命令行常用命令\r\n</p>\r\n<p>\r\n	第一招、mysql服务的启动和停止<br />\r\nnet stop mysql<br />\r\nnet start mysql<br />\r\n第二招、登陆mysql<br />\r\n语法如下： mysql -u用户名 -p用户密码<br />\r\n键入命令mysql -uroot -p， 回车后提示你输入密码，输入12345，然后回车即可进入到mysql中了，mysql的提示符是：<br />\r\nmysql&gt;<br />\r\n注意，如果是连接到另外的机器上，则需要加入一个参数-h机器IP<br />\r\n第三招、增加新用户<br />\r\n格式：grant 权限 on 数据库.* to 用户名@登录主机 identified by “密码”<br />\r\n如，增加一个用户user1密码为password1，让其可以在本机上登录， 并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入mysql，然后键入以下命令：<br />\r\ngrant select,insert,update,delete on *.* to user1@localhost Identified by “password1″;<br />\r\n如果希望该用户能够在任何机器上登陆mysql，则将localhost改为”%”。<br />\r\n如果你不想user1有密码，可以再打一个命令将密码去掉。<br />\r\ngrant select,insert,update,delete on mydb.* to user1@localhost identified by “”;<br />\r\n第四招： 操作数据库<br />\r\n登录到mysql中，然后在mysql的提示符下运行下列命令，每个命令以分号结束。<br />\r\n1、 显示数据库列表。<br />\r\nshow databases;<br />\r\n缺省有两个数据库：mysql和test。 mysql库存放着mysql的系统和用户权限信息，我们改密码和新增用户，实际上就是对这个库进行操作。<br />\r\n2、 显示库中的数据表：<br />\r\nuse mysql;<br />\r\nshow tables;<br />\r\n3、 显示数据表的结构：<br />\r\ndescribe 表名;<br />\r\n4、 建库与删库：<br />\r\ncreate database 库名;<br />\r\ndrop database 库名;<br />\r\n5、 建表：<br />\r\nuse 库名;<br />\r\ncreate table 表名(字段列表);<br />\r\ndrop table 表名;<br />\r\n6、 清空表中记录：<br />\r\ndelete from 表名;<br />\r\n7、 显示表中的记录：<br />\r\nselect * from 表名;<br />\r\n第五招、导出和导入数据<br />\r\n1. 导出数据：<br />\r\nmysqldump –opt test &gt; mysql.test<br />\r\n即将数据库test数据库导出到mysql.test文件，后者是一个文本文件<br />\r\n如：mysqldump -u root -p123456 –databases dbname &gt; mysql.dbname<br />\r\n就是把数据库dbname导出到文件mysql.dbname中。<br />\r\n2. 导入数据:<br />\r\nmysqlimport -u root -p123456 &lt; mysql.dbname。<br />\r\n不用解释了吧。<br />\r\n3. 将文本数据导入数据库:<br />\r\n文本数据的字段数据之间用tab键隔开。<br />\r\nuse test;<br />\r\nload data local infile “文件名” into table 表名;\r\n</p>\r\n<p>\r\n	SQL常用命令使用方法：\r\n</p>\r\n<p>\r\n	(1) 数据记录筛选：\r\n</p>\r\n<p>\r\n	sql=”select * from 数据表 where 字段名=字段值 order by 字段名 [desc]”\r\n</p>\r\n<p>\r\n	sql=”select * from 数据表 where 字段名 like ‘%字段值%’ order by 字段名 [desc]”\r\n</p>\r\n<p>\r\n	sql=”select top 10 * from 数据表 where 字段名 order by 字段名 [desc]”\r\n</p>\r\n<p>\r\n	sql=”select * from 数据表 where 字段名 in (‘值1′,’值2′,’值3′)”\r\n</p>\r\n<p>\r\n	sql=”select * from 数据表 where 字段名 between 值1 and 值2″\r\n</p>\r\n<p>\r\n	(2) 更新数据记录：\r\n</p>\r\n<p>\r\n	sql=”update 数据表 set 字段名=字段值 where 条件表达式”\r\n</p>\r\n<p>\r\n	sql=”update 数据表 set 字段1=值1,字段2=值2 …… 字段n=值n where 条件表达式”\r\n</p>\r\n<p>\r\n	(3) 删除数据记录：\r\n</p>\r\n<p>\r\n	sql=”delete from 数据表 where 条件表达式”\r\n</p>\r\n<p>\r\n	sql=”delete from 数据表” (将数据表所有记录删除)\r\n</p>\r\n<p>\r\n	(4) 添加数据记录：\r\n</p>\r\n<p>\r\n	sql=”insert into 数据表 (字段1,字段2,字段3 …) valuess (值1,值2,值3 …)”\r\n</p>\r\n<p>\r\n	sql=”insert into 目标数据表 select * from 源数据表” (把源数据表的记录添加到目标数据表)\r\n</p>\r\n<p>\r\n	(5) 数据记录统计函数：\r\n</p>\r\n<p>\r\n	AVG(字段名) 得出一个表格栏平均值<br />\r\nCOUNT(*|字段名) 对数据行数的统计或对某一栏有值的数据行数统计<br />\r\nMAX(字段名) 取得一个表格栏最大的值<br />\r\nMIN(字段名) 取得一个表格栏最小的值<br />\r\nSUM(字段名) 把数据栏的值相加\r\n</p>\r\n<p>\r\n	引用以上函数的方法：\r\n</p>\r\n<p>\r\n	sql=”select sum(字段名) as 别名 from 数据表 where 条件表达式”<br />\r\nset rs=conn.excute(sql)\r\n</p>\r\n<p>\r\n	用 rs(“别名”) 获取统的计值，其它函数运用同上。\r\n</p>\r\n<p>\r\n	(6) 数据表的建立和删除：\r\n</p>\r\n<p>\r\n	CREATE TABLE 数据表名称(字段1 类型1(长度),字段2 类型2(长度) …… )\r\n</p>\r\n<p>\r\n	例：CREATE TABLE tab01(name varchar(50),datetime default now())\r\n</p>\r\n<p>\r\n	DROP TABLE 数据表名称 (永久性删除一个数据表)\r\n</p>\r\n<p>\r\n	<br />\r\n</p>','2013-06-11 10:07:24','2013-06-11 10:07:24'),(2,1,NULL,'清除build.xml文件的错误提示','在学习phonegap的时候，发现demo里有个build.xml的文件，一时好奇就将其打开，结果发现打开后文件里面有错误提示，这个时候在执行\r\ndemo就报错了：“Default target help does not exist in this \r\nproject”，使用clean等都不能解决这个错误，后来在网上找到了解决方法，打开Eclipse的错误提示部分（Problems）,右键点击错\r\n误，选择delete，就将该错误删除了，这个时候就能正常执行了！','2013-06-11 10:09:17','2013-06-11 10:09:17'),(3,1,NULL,'android拖动图片','<p>\r\n	关于《多点触控浏览器进行的开发》资料可以查看 http://select.yeeyan.org/view/213582/202991，里面有关于拖动图片的js代码，如下：\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-js\">var obj = document.getElementById(‘id’);\r\nobj.addEventListener(‘touchmove’, function(event) {\r\n// 如果这个元素的位置内只有一个手指的话\r\nif (event.targetTouches.length == 1) {\r\nvar touch = event.targetTouches[0];\r\n// 把元素放在手指所在的位置\r\nobj.style.left = touch.pageX + ‘px’;\r\nobj.style.top = touch.pageY + ‘px’;\r\n}\r\n}, false);</pre>\r\n不过我在android应用程序的WebView里使用时发现图片没有移动过程，经常从一个坐标跳到另一个坐标，加上event.preventDefault();这句图片就有移动效果了。代码如下：\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-js\">var obj = document.getElementById(‘id’);\r\nobj.addEventListener(‘touchmove’, function(event) {\r\nevent.preventDefault();\r\n// 如果这个元素的位置内只有一个手指的话\r\nif (event.targetTouches.length == 1) {\r\nvar touch = event.targetTouches[0];\r\n// 把元素放在手指所在的位置\r\nobj.style.left = touch.pageX + ‘px’;\r\nobj.style.top = touch.pageY + ‘px’;\r\n}\r\n}, false);</pre>\r\n</p>','2013-06-11 10:10:48','2013-06-11 10:10:48'),(4,1,NULL,'js关于var的问题','当在js的方法里将值或方法赋给一个没有定义的变量时，js会将其当成全局变量<br />\r\n参考：http://sd.csdn.net/a/20120529/2806080.html<br />\r\n如果你不用var，那么这个js引擎会一层一层地向上找父作用域中的变量，如果找到了，就用，如果找不到了，就会帮你定义一个全局的变量。上面这个例子充分说明了这一点。所以，如果你想在当前的作用域用声明变量，你一定要用var。','2013-06-11 10:12:12','2013-06-11 10:12:12'),(5,1,NULL,'Android在logcat中显示webview中错误的js的的信息','<p>\r\n	1：在Activity的onCreate方法里加上\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-java\">webView.setWebChromeClient(new WebChromeClient() {  }); </pre>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	这样webview加载的html文件里js有错时会在logcat里显示出来，方便查找错误；\r\n</p>\r\n<p>\r\n	2：给webview添加alert()方法，代码如下\r\n</p>\r\n<p>\r\n	//添加alert方法到webview\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<pre class=\"prettyprint lang-java\">webView.setWebChromeClient(new WebChromeClient() {\r\n@Override\r\npublic boolean onJsAlert(WebView view, String url, String message, final android.webkit.JsResult result)\r\n{\r\n  new AlertDialog.Builder(myApp)\r\n .setTitle(\"\")\r\n  .setMessage(message)\r\n  .setPositiveButton(android.R.string.ok,\r\n  new AlertDialog.OnClickListener()\r\n  {\r\n  public void onClick(DialogInterface dialog, int which)\r\n  {\r\n    result.confirm();\r\n  }\r\n  })\r\n  .setCancelable(false)\r\n .create()\r\n  .show();\r\n\r\n  return true;\r\n };\r\n});</pre>\r\n<p>\r\n	<br />\r\n</p>','2013-06-11 10:15:15','2013-06-11 10:15:15'),(6,1,NULL,'MySQL的类型转换convert\\cast','<div class=\"entry-content\">\r\n	<p>\r\n		字符集转换 : <strong>CONVERT(xxx USING gb2312)</strong>\r\n	</p>\r\n	<p>\r\n		类型转换和SQL Server一样,就是类型参数有点点不同 :<strong> CAST(xxx AS 类型) , CONVERT(xxx,类型)</strong>\r\n	</p>\r\n	<p>\r\n		可用的类型<br />\r\n二进制,同带binary前缀的效果 : BINARY<br />\r\n字符型,可带参数 : CHAR()<br />\r\n日期 : DATE<br />\r\n时间: TIME<br />\r\n日期时间型 : DATETIME<br />\r\n浮点数 : DECIMAL<br />\r\n整数 : SIGNED<br />\r\n无符号整数 : UNSIGNED\r\n	</p>\r\n</div>','2013-06-11 10:16:16','2013-06-11 10:16:16'),(7,1,NULL,'android平台上phonegap在webview上打开其它网站而不是使用浏览器打开','我用的phonegap版本是1.8.1，这个版本源码包的名称已经改成cordova-1.8.1.jar了，配置完项目后，在res/xml\r\n/cordova.xml文件里找到&lt;access \r\norigin=”127.0.0.1*”/&gt;，这个是默认配置，这上面配置的网站在应用程序里打开是会直接在webview里打开，如果没有配置这个会使用浏览器打开，要配置别的网站也在webview里打开加上&lt;access origin=”网站地址*”/&gt;就可以了','2013-06-11 10:17:48','2013-06-11 10:17:48'),(8,1,NULL,'创建低版本rails项目','由于虚拟主机上的rails版本是2.1.2,而我自己电脑上默认的是2.3.5,所以在创建项目时要使用2.1.2版本的rails,方法很简单,首先\r\n切换到项目文件目录下,运行命令:rails _2.1.2_ project_name -dmysql \r\n;_2.1.2_为项目的rails版本,project_name为项目名,-dmysql为使用mysql数据库,如果没有-dmysql的话默认是\r\nsqlite数据库.','2013-06-11 10:18:55','2013-06-11 10:18:55'),(9,1,NULL,'rails动态更改连接的数据库','在database.yml里配置需要连接的数据库信息<br />\r\n<p>\r\n	例：\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-rb\">production:\r\n&nbsp;&nbsp;&nbsp;&nbsp;adapter: mysql\r\n&nbsp;&nbsp;&nbsp;&nbsp;encoding: utf8\r\n&nbsp;&nbsp;&nbsp;&nbsp;reconnect: false\r\n&nbsp;&nbsp;&nbsp;&nbsp;database: snowpole\r\n&nbsp;&nbsp;&nbsp;&nbsp;pool: 5\r\n&nbsp;&nbsp;&nbsp;&nbsp;username: root\r\n&nbsp;&nbsp;&nbsp;&nbsp;password: 123456\r\n&nbsp;&nbsp;&nbsp;&nbsp;host: localhost\r\nproduction_1:\r\n&nbsp;&nbsp;&nbsp;&nbsp;adapter: mysql\r\n&nbsp;&nbsp;&nbsp;&nbsp;encoding: utf8\r\n&nbsp;&nbsp;&nbsp;&nbsp;reconnect: false\r\n&nbsp;&nbsp;&nbsp;&nbsp;database: snowpole\r\n&nbsp;&nbsp;&nbsp;&nbsp;pool: 5\r\n&nbsp;&nbsp;&nbsp;&nbsp;username: root\r\n&nbsp;&nbsp;&nbsp;&nbsp;password: 123456\r\n&nbsp;&nbsp;&nbsp;&nbsp;host: 192.168.200.36</pre>\r\n获取当前连接的数据库host，如果2个数据库的host不同则更改连接的数据库\r\n</p>\r\n<p>\r\n<pre class=\"prettyprint lang-rb\">now_host = ActiveRecord::Base.connection_pool.spec.config[:host]#=&gt; localhost 获取当前连接的数据库host\r\nconfig = YAML::load(File.open(\'config/database.yml\'))#读取database.yml\r\nnew_host = config[\"production_1\"][\"host\"] #=&gt; 192.168.200.36 获取production_1的host\r\nif now_host != new_host\r\nActiveRecord::Base.establish_connection(config[\"production_1\"]) #连接到新的数据库（production_1）\r\nend</pre>\r\n</p>','2013-06-11 10:20:42','2013-06-11 10:20:42'),(10,1,NULL,'安装android3.0出现的问题','<p>\r\n	在安装android3.0的过程中，出现Could not find F:\\andriod\\android-sdk-windows\\tools\\adb.exe错误，查找资料后发现adb。exe在platform-tools文件夹里，解决方法：\r\n</p>\r\n<p>\r\n<pre id=\"content-662528239\">首先，改一下你的环境变量（如果你配过环境变量的话就执行这一步，如果没有配置过的话就不用执行这一步，直接下一步即可！），把原来的D:\\android-sdk-windows\\tools改成D:\\android-sdk-windows\\platform-tools。\r\n其次，把D:\\android-sdk-windows\\platform-tools目录下的adb.exe，AdbWinApi.dll，AdbWinUsbApi.dll 这三个文件拷到你D:\\android-sdk-windows\\tools目录下，然后把其它文件都拷贝到D:\\android-sdk-windows\\platforms\\android-9\\tools目录下，这时你就有疑问了，在D:\\android-sdk-windows\\platforms\\android-9 这个目录下并没有tools文件夹，这时就需要你建一个新的tools文件夹，把它们放到里面。\r\n到这，大部分工作已经完成，现在你可以重启Eclipse了，不过它会提示你更新Android插件，这时，你按照提示做就OK了。</pre>\r\n</p>','2013-06-11 10:21:39','2013-06-11 10:21:39'),(11,1,NULL,'rails3启动发生mysql2错误','今天新建了一个rails3项目，开启服务的时候报错<br />\r\ne:/Rails/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11-x86-mingw32/lib/mysql2/mysql2.rb:2:in\r\n `require\': Incorrect MySQL client library version! This gemwas compiled\r\n for 6.0.0 but the client library is 5.1.62. (RuntimeError)<br />\r\n查看了gem发现已经安装了mysql2，网上查资料发现需要下载mysql-connector-c-noinstall-6.0.2-win32.zip，将里面的/lib/libmysql.dll复制到ruby1.9.3的bin目录就可以了','2013-06-11 10:22:24','2013-06-11 10:22:24'),(12,1,NULL,'rails3常用命令','<div class=\"entry-content\">\r\n	<p align=\"left\">\r\n		新建一个rails工程\r\n	</p>\r\n	<p align=\"left\">\r\n		$ rails new + 工程名\r\n	</p>\r\n	<p align=\"left\">\r\n		进入控制台&nbsp; $ rails c 或者 rails console\r\n	</p>\r\n	<p align=\"left\">\r\n		开启服务\r\n	</p>\r\n	<p align=\"left\">\r\n		$ rails server -b 127.0.0.1 -p 3003 &nbsp;#=&gt; http://127.0.0.1:3003\r\n	</p>\r\n	<p align=\"left\">\r\n		生成Rails API文档 $ rake doc:rails #/doc/api目录下就有了一份完整的Rails API文档操作数据库\r\n	</p>\r\n	<p align=\"left\">\r\n		$ sudo rails dbconsole 我用的是ubuntu，需要sudo，要不然权限有问题\r\n	</p>\r\n	<p align=\"left\">\r\n		通过rails的scaffold脚手架生成一个简易web &nbsp;CRUD程序,包括一组Model、Views跟Controller\r\n	</p>\r\n	<p align=\"left\">\r\n		$ rails g scaffold person name:string bio:text birthday:date\r\n	</p>\r\n	<p align=\"left\">\r\n		创建一个model\r\n	</p>\r\n	<p align=\"left\">\r\n		$ rails g model article\r\n	</p>\r\n	<p align=\"left\">\r\n		删除这个创建的model\r\n	</p>\r\n	<p align=\"left\">\r\n		$ rails destroy model article\r\n	</p>\r\n	<p align=\"left\">\r\n		创建一个controller\r\n	</p>\r\n	<p align=\"left\">\r\n		$ rails g controller products index\r\n	</p>\r\n	<p align=\"left\">\r\n		#创建一个controller 顺带创建了index.html.erb&nbsp;创建数据库(指定环境需要加上: &nbsp;RAILS_EVN=product)\r\n	</p>\r\n	<p align=\"left\">\r\n		$ rake db:create\r\n	</p>\r\n	<p align=\"left\">\r\n		#根据config/database.yml中的配置创建各环境下的空数据库\r\n	</p>\r\n	<p align=\"left\">\r\n		$ rake db:migrate\r\n	</p>\r\n	<p align=\"left\">\r\n		#根据app的migration 文件生成对应的表&nbsp;安装plugin\r\n	</p>\r\n	<p align=\"left\">\r\n		$ rails plugin install &nbsp;https://…./..git &nbsp; &nbsp; #对应的plugin会被安装到 Vendor目录下\r\n	</p>\r\n</div>','2013-06-11 10:22:54','2013-06-11 10:22:54'),(13,1,NULL,'Linux常用命令大全','<div class=\"entry-content\">\r\n	<p>\r\n		详细命令见：http://linux.chinaitlab.com/special/linuxcom/\r\n	</p>\r\n	<p>\r\n		系统信息<br />\r\narch 显示机器的处理器架构(1)<br />\r\nuname -m 显示机器的处理器架构(2)<br />\r\nuname -r 显示正在使用的内核版本<br />\r\ndmidecode -q 显示硬件系统部件 – (SMBIOS / DMI)<br />\r\nhdparm -i /dev/hda 罗列一个磁盘的架构特性<br />\r\nhdparm -tT /dev/sda 在磁盘上执行测试性读取操作<br />\r\ncat /proc/cpuinfo 显示CPU info的信息<br />\r\ncat /proc/interrupts 显示中断<br />\r\ncat /proc/meminfo 校验内存使用<br />\r\ncat /proc/swaps 显示哪些swap被使用<br />\r\ncat /proc/version 显示内核的版本<br />\r\ncat /proc/net/dev 显示网络适配器及统计<br />\r\ncat /proc/mounts 显示已加载的文件系统<br />\r\nlspci -tv 罗列 PCI 设备<br />\r\nlsusb -tv 显示 USB 设备<br />\r\ndate 显示系统日期<br />\r\ncal 2007 显示2007年的日历表<br />\r\ndate 041217002007.00 设置日期和时间 – 月日时分年.秒<br />\r\nclock -w 将时间修改保存到 BIOS\r\n	</p>\r\n	<p>\r\n		关机 (系统的关机、重启以及登出 )<br />\r\nshutdown -h now 关闭系统(1)<br />\r\ninit 0 关闭系统(2)<br />\r\ntelinit 0 关闭系统(3)<br />\r\nshutdown -h hours:minutes &amp; 按预定时间关闭系统<br />\r\nshutdown -c 取消按预定时间关闭系统<br />\r\nshutdown -r now 重启(1)<br />\r\nreboot 重启(2)<br />\r\nlogout 注销\r\n	</p>\r\n	<p>\r\n		文件和目录<br />\r\ncd /home 进入 ‘/ home’ 目录’<br />\r\ncd .. 返回上一级目录<br />\r\ncd ../.. 返回上两级目录<br />\r\ncd 进入个人的主目录<br />\r\ncd ~user1 进入个人的主目录<br />\r\ncd – 返回上次所在的目录<br />\r\npwd 显示工作路径<br />\r\nls 查看目录中的文件<br />\r\nls -F 查看目录中的文件<br />\r\nls -l 显示文件和目录的详细资料<br />\r\nls -a 显示隐藏文件<br />\r\nls *[0-9]* 显示包含数字的文件名和目录名<br />\r\ntree 显示文件和目录由根目录开始的树形结构(1)<br />\r\nlstree 显示文件和目录由根目录开始的树形结构(2)<br />\r\nmkdir dir1 创建一个叫做 ‘dir1′ 的目录’<br />\r\nmkdir dir1 dir2 同时创建两个目录<br />\r\nmkdir -p /tmp/dir1/dir2 创建一个目录树<br />\r\nrm -f file1 删除一个叫做 ‘file1′ 的文件’<br />\r\nrmdir dir1 删除一个叫做 ‘dir1′ 的目录’<br />\r\nrm -rf dir1 删除一个叫做 ‘dir1′ 的目录并同时删除其内容<br />\r\nrm -rf dir1 dir2 同时删除两个目录及它们的内容<br />\r\nmv dir1 new_dir 重命名/移动 一个目录<br />\r\ncp file1 file2 复制一个文件<br />\r\ncp dir/* . 复制一个目录下的所有文件到当前工作目录<br />\r\ncp -a /tmp/dir1 . 复制一个目录到当前工作目录<br />\r\ncp -a dir1 dir2 复制一个目录<br />\r\nln -s file1 lnk1 创建一个指向文件或目录的软链接<br />\r\nln file1 lnk1 创建一个指向文件或目录的物理链接<br />\r\ntouch -t 0712250000 file1 修改一个文件或目录的时间戳 – (YYMMDDhhmm)<br />\r\nfile file1 outputs the mime type of the file as text<br />\r\niconv -l 列出已知的编码<br />\r\niconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a \r\nnew from the given input file by assuming it is encoded in fromEncoding \r\nand converting it to toEncoding.<br />\r\nfind . -maxdepth 1 -name *.jpg -print -exec convert “{}” -resize 80×60 \r\n“thumbs/{}” \\; batch resize files in the current directory and send them\r\n to a thumbnails directory (requires convert from Imagemagick)\r\n	</p>\r\n	<p>\r\n		文件搜索<br />\r\nfind / -name file1 从 ‘/’ 开始进入根文件系统搜索文件和目录<br />\r\nfind / -user user1 搜索属于用户 ‘user1′ 的文件和目录<br />\r\nfind /home/user1 -name \\*.bin 在目录 ‘/ home/user1′ 中搜索带有’.bin’ 结尾的文件<br />\r\nfind /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<br />\r\nfind /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件<br />\r\nfind / -name \\*.rpm -exec chmod 755 ‘{}’ \\; 搜索以 ‘.rpm’ 结尾的文件并定义其权限<br />\r\nfind / -xdev -name \\*.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备<br />\r\nlocate \\*.ps 寻找以 ‘.ps’ 结尾的文件 – 先运行 ‘updatedb’ 命令<br />\r\nwhereis halt 显示一个二进制文件、源码或man的位置<br />\r\nwhich halt 显示一个二进制文件或可执行文件的完整路径\r\n	</p>\r\n	<p>\r\n		挂载一个文件系统<br />\r\nmount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 – 确定目录 ‘/ mnt/hda2′ 已经存在<br />\r\numount /dev/hda2 卸载一个叫做hda2的盘 – 先从挂载点 ‘/ mnt/hda2′ 退出<br />\r\nfuser -km /mnt/hda2 当设备繁忙时强制卸载<br />\r\numount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用<br />\r\nmount /dev/fd0 /mnt/floppy 挂载一个软盘<br />\r\nmount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom<br />\r\nmount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom<br />\r\nmount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom<br />\r\nmount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件<br />\r\nmount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统<br />\r\nmount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备<br />\r\nmount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享\r\n	</p>\r\n	<p>\r\n		磁盘空间<br />\r\ndf -h 显示已经挂载的分区列表<br />\r\nls -lSr |more 以尺寸大小排列文件和目录<br />\r\ndu -sh dir1 估算目录 ‘dir1′ 已经使用的磁盘空间’<br />\r\ndu -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小<br />\r\nrpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)<br />\r\ndpkg-query -W -f=’${Installed-Size;10}t${Package}n’ | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		用户和群组<br />\r\ngroupadd group_name 创建一个新用户组<br />\r\ngroupdel group_name 删除一个用户组<br />\r\ngroupmod -n new_group_name old_group_name 重命名一个用户组<br />\r\nuseradd -c “Name Surname ” -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户<br />\r\nuseradd user1 创建一个新用户<br />\r\nuserdel -r user1 删除一个用户 ( ‘-r’ 排除主目录)<br />\r\nusermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性<br />\r\npasswd 修改口令<br />\r\npasswd user1 修改一个用户的口令 (只允许root执行)<br />\r\nchage -E 2005-12-31 user1 设置用户口令的失效期限<br />\r\npwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户<br />\r\ngrpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组<br />\r\nnewgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		文件的权限 – 使用 “+” 设置权限，使用 “-” 用于取消<br />\r\nls -lh 显示权限<br />\r\nls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示<br />\r\nchmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限<br />\r\nchmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限<br />\r\nchown user1 file1 改变一个文件的所有人属性<br />\r\nchown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<br />\r\nchgrp group1 file1 改变文件的群组<br />\r\nchown user1:group1 file1 改变一个文件的所有人和群组属性<br />\r\nfind / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件<br />\r\nchmod u+s /bin/file1 设置一个二进制文件的 SUID 位 – 运行该文件的用户也被赋予和所有者同样的权限<br />\r\nchmod u-s /bin/file1 禁用一个二进制文件的 SUID位<br />\r\nchmod g+s /home/public 设置一个目录的SGID 位 – 类似SUID ，不过这是针对目录的<br />\r\nchmod g-s /home/public 禁用一个目录的 SGID 位<br />\r\nchmod o+t /home/public 设置一个文件的 STIKY 位 – 只允许合法所有人删除文件<br />\r\nchmod o-t /home/public 禁用一个目录的 STIKY 位\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		文件的特殊属性 – 使用 “+” 设置权限，使用 “-” 用于取消<br />\r\nchattr +a file1 只允许以追加方式读写文件<br />\r\nchattr +c file1 允许这个文件能被内核自动压缩/解压<br />\r\nchattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件<br />\r\nchattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接<br />\r\nchattr +s file1 允许一个文件被安全地删除<br />\r\nchattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘<br />\r\nchattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件<br />\r\nlsattr 显示特殊的属性\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		打包和压缩文件<br />\r\nbunzip2 file1.bz2 解压一个叫做 ‘file1.bz2′的文件<br />\r\nbzip2 file1 压缩一个叫做 ‘file1′ 的文件<br />\r\ngunzip file1.gz 解压一个叫做 ‘file1.gz’的文件<br />\r\ngzip file1 压缩一个叫做 ‘file1′的文件<br />\r\ngzip -9 file1 最大程度压缩<br />\r\nrar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包<br />\r\nrar a file1.rar file1 file2 dir1 同时压缩 ‘file1′, ‘file2′ 以及目录 ‘dir1′<br />\r\nrar x file1.rar 解压rar包<br />\r\nunrar x file1.rar 解压rar包<br />\r\ntar -cvf archive.tar file1 创建一个非压缩的 tarball<br />\r\ntar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1′, ‘file2′ 以及 ‘dir1′的档案文件<br />\r\ntar -tf archive.tar 显示一个包中的内容<br />\r\ntar -xvf archive.tar 释放一个包<br />\r\ntar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下<br />\r\ntar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包<br />\r\ntar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包<br />\r\ntar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包<br />\r\ntar -xvfz archive.tar.gz 解压一个gzip格式的压缩包<br />\r\nzip file1.zip file1 创建一个zip格式的压缩包<br />\r\nzip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包<br />\r\nunzip file1.zip 解压一个zip格式压缩包\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		RPM 包 – （Fedora, Redhat及类似系统）<br />\r\nrpm -ivh package.rpm 安装一个rpm包<br />\r\nrpm -ivh –nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告<br />\r\nrpm -U package.rpm 更新一个rpm包但不改变其配置文件<br />\r\nrpm -F package.rpm 更新一个确定已经安装的rpm包<br />\r\nrpm -e package_name.rpm 删除一个rpm包<br />\r\nrpm -qa 显示系统中所有已经安装的rpm包<br />\r\nrpm -qa | grep httpd 显示所有名称中包含 “httpd” 字样的rpm包<br />\r\nrpm -qi package_name 获取一个已安装包的特殊信息<br />\r\nrpm -qg “System Environment/Daemons” 显示一个组件的rpm包<br />\r\nrpm -ql package_name 显示一个已经安装的rpm包提供的文件列表<br />\r\nrpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表<br />\r\nrpm -q package_name –whatrequires 显示与一个rpm包存在依赖关系的列表<br />\r\nrpm -q package_name –whatprovides 显示一个rpm包所占的体积<br />\r\nrpm -q package_name –scripts 显示在安装/删除期间所执行的脚本l<br />\r\nrpm -q package_name –changelog 显示一个rpm包的修改历史<br />\r\nrpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供<br />\r\nrpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表<br />\r\nrpm –import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书<br />\r\nrpm –checksig package.rpm 确认一个rpm包的完整性<br />\r\nrpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性<br />\r\nrpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间<br />\r\nrpm -Va 检查系统中所有已安装的rpm包- 小心使用<br />\r\nrpm -Vp package.rpm 确认一个rpm包还未安装<br />\r\nrpm2cpio package.rpm | cpio –extract –make-directories *bin* 从一个rpm包运行可执行文件<br />\r\nrpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包<br />\r\nrpmbuild –rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		YUM 软件包升级器 – （Fedora, RedHat及类似系统）<br />\r\nyum install package_name 下载并安装一个rpm包<br />\r\nyum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系<br />\r\nyum update package_name.rpm 更新当前系统中所有安装的rpm包<br />\r\nyum update package_name 更新一个rpm包<br />\r\nyum remove package_name 删除一个rpm包<br />\r\nyum list 列出当前系统中安装的所有包<br />\r\nyum search package_name 在rpm仓库中搜寻软件包<br />\r\nyum clean packages 清理rpm缓存删除下载的包<br />\r\nyum clean headers 删除所有头文件<br />\r\nyum clean all 删除所有缓存的包和头文件\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		DEB 包 (Debian, Ubuntu 以及类似系统)<br />\r\ndpkg -i package.deb 安装/更新一个 deb 包<br />\r\ndpkg -r package_name 从系统删除一个 deb 包<br />\r\ndpkg -l 显示系统中所有已经安装的 deb 包<br />\r\ndpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包<br />\r\ndpkg -s package_name 获得已经安装在系统中一个特殊包的信息<br />\r\ndpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表<br />\r\ndpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表<br />\r\ndpkg -S /bin/ping 确认所给的文件由哪个deb包提供\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		APT 软件工具 (Debian, Ubuntu 以及类似系统)<br />\r\napt-get install package_name 安装/更新一个 deb 包<br />\r\napt-cdrom install package_name 从光盘安装/更新一个 deb 包<br />\r\napt-get update 升级列表中的软件包<br />\r\napt-get upgrade 升级所有已安装的软件<br />\r\napt-get remove package_name 从系统删除一个deb包<br />\r\napt-get check 确认依赖的软件仓库正确<br />\r\napt-get clean 从下载的软件包中清理缓存<br />\r\napt-cache search searched-package 返回包含所要搜索字符串的软件包名称\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		查看文件内容<br />\r\ncat file1 从第一个字节开始正向查看文件的内容<br />\r\ntac file1 从最后一行开始反向查看一个文件的内容<br />\r\nmore file1 查看一个长文件的内容<br />\r\nless file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作<br />\r\nhead -2 file1 查看一个文件的前两行<br />\r\ntail -2 file1 查看一个文件的最后两行<br />\r\ntail -f /var/log/messages 实时查看被添加到一个文件中的内容\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		文本处理<br />\r\ncat file1 file2 … | command &lt;&gt; file1_in.txt_or_file1_out.txt \r\ngeneral syntax for text manipulation using PIPE, STDIN and STDOUT<br />\r\ncat file1 | command( sed, grep, awk, grep, etc…) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中<br />\r\ncat file1 | command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中<br />\r\ngrep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug”<br />\r\ngrep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇<br />\r\ngrep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行<br />\r\ngrep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug”<br />\r\nsed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1″ 替换成 “string2″<br />\r\nsed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行<br />\r\nsed ‘/ *#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行<br />\r\necho ‘esempio’ | tr ‘[:lower:]‘ ‘[:upper:]‘ 合并上下单元格内容<br />\r\nsed -e ’1d’ result.txt 从文件example.txt 中排除第一行<br />\r\nsed -n ‘/stringa1/p’ 查看只包含词汇 “string1″的行<br />\r\nsed -e ‘s/ *$//’ example.txt 删除每一行最后的空白字符<br />\r\nsed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1″ 并保留剩余全部<br />\r\nsed -n ’1,5p;5q’ example.txt 查看从第一行到第5行内容<br />\r\nsed -n ’5p;5q’ example.txt 查看第5行<br />\r\nsed -e ‘s/00*/0/g’ example.txt 用单个零替换多个零<br />\r\ncat -n file1 标示文件的行数<br />\r\ncat example.txt | awk ‘NR%2==1′ 删除example.txt文件中的所有偶数行<br />\r\necho a b c | awk ‘{print $1}’ 查看一行第一栏<br />\r\necho a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏<br />\r\npaste file1 file2 合并两个文件或两栏的内容<br />\r\npaste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分<br />\r\nsort file1 file2 排序两个文件的内容<br />\r\nsort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)<br />\r\nsort file1 file2 | uniq -u 删除交集，留下其他的行<br />\r\nsort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)<br />\r\ncomm -1 file1 file2 比较两个文件的内容只删除 ‘file1′ 所包含的内容<br />\r\ncomm -2 file1 file2 比较两个文件的内容只删除 ‘file2′ 所包含的内容<br />\r\ncomm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		字符设置和文件格式转换<br />\r\ndos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX<br />\r\nunix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS<br />\r\nrecode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html<br />\r\nrecode -l | more 显示所有允许的转换格式\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		文件系统分析<br />\r\nbadblocks -v /dev/hda1 检查磁盘hda1上的坏磁块<br />\r\nfsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性<br />\r\nfsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br />\r\ne2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性<br />\r\ne2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br />\r\nfsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性<br />\r\nfsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性<br />\r\nfsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性<br />\r\ndosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		初始化一个文件系统<br />\r\nmkfs /dev/hda1 在hda1分区创建一个文件系统<br />\r\nmke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统<br />\r\nmke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统<br />\r\nmkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统<br />\r\nfdformat -n /dev/fd0 格式化一个软盘<br />\r\nmkswap /dev/hda3 创建一个swap文件系统\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		SWAP文件系统<br />\r\nmkswap /dev/hda3 创建一个swap文件系统<br />\r\nswapon /dev/hda3 启用一个新的swap文件系统<br />\r\nswapon /dev/hda2 /dev/hdb3 启用两个swap分区\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		备份<br />\r\ndump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份<br />\r\ndump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份<br />\r\nrestore -if /tmp/home0.bak 还原一个交互式备份<br />\r\nrsync -rogpav –delete /home /tmp 同步两边的目录<br />\r\nrsync -rogpav -e ssh –delete /home ip_address:/tmp 通过SSH通道rsync<br />\r\nrsync -az -e ssh –delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录<br />\r\nrsync -az -e ssh –delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录<br />\r\ndd bs=1M if=/dev/hda | gzip | ssh user@ip_addr ‘dd of=hda.gz’ 通过ssh在远程主机上执行一次备份本地磁盘的操作<br />\r\ndd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件<br />\r\ntar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作<br />\r\n( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个目录内容<br />\r\n( tar c /home ) | ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个本地目录<br />\r\ntar cf – . | (cd /tmp/backup ; tar xf – ) 本地将一个目录复制到另一个地方，保留原有权限及链接<br />\r\nfind /home/user1 -name ‘*.txt’ | xargs cp -av –target-directory=/home/backup/ –parents 从一个目录查找并复制所有以 ‘.txt’ 结尾的文件到另一个目录<br />\r\nfind /var/log -name ‘*.log’ | tar cv –files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 ‘.log’ 结尾的文件并做成一个bzip包<br />\r\ndd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作<br />\r\ndd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		光盘<br />\r\ncdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容<br />\r\nmkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件<br />\r\nmkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件<br />\r\nmkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件<br />\r\ncdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件<br />\r\ngzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom – 刻录一个压缩了的ISO镜像文件<br />\r\nmount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件<br />\r\ncd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中<br />\r\ncd-paranoia — “-3″ 从一个CD光盘转录音轨到 wav 文件中（参数-3）<br />\r\ncdrecord –scanbus 扫描总线以识别scsi通道<br />\r\ndd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD\r\n	</p>\r\n	<p>\r\n		返回顶部索引 ^\r\n	</p>\r\n	<p>\r\n		网络 – （以太网和WIFI无线）<br />\r\nifconfig eth0 显示一个以太网卡的配置<br />\r\nifup eth0 启用一个 ‘eth0′ 网络设备<br />\r\nifdown eth0 禁用一个 ‘eth0′ 网络设备<br />\r\nifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址<br />\r\nifconfig eth0 promisc 设置 ‘eth0′ 成混杂模式以嗅探数据包 (sniffing)<br />\r\ndhclient eth0 以dhcp模式启用 ‘eth0′<br />\r\nroute -n show routing table<br />\r\nroute add -net 0/0 gw IP_Gateway configura default gateway<br />\r\nroute add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network ’192.168.0.0/16′<br />\r\nroute del 0/0 gw IP_gateway remove static route<br />\r\necho “1″ &gt; /proc/sys/net/ipv4/ip_forward activate ip routing<br />\r\nhostname show hostname of system<br />\r\nhost www.example.com lookup hostname to resolve name to ip address and viceversa(1)<br />\r\nnslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2)<br />\r\nip link show show link status of all interfaces<br />\r\nmii-tool eth0 show link status of ‘eth0′<br />\r\nethtool eth0 show statistics of network card ‘eth0′<br />\r\nnetstat -tup show all active network connections and their PID<br />\r\nnetstat -tupl show all network services listening on the system and their PID<br />\r\ntcpdump tcp port 80 show all HTTP traffic<br />\r\niwlist scan show wireless networks<br />\r\niwconfig eth1 show configuration of a wireless network card<br />\r\nhostname show hostname<br />\r\nhost www.example.com lookup hostname to resolve name to ip address and viceversa<br />\r\nnslookup www.example.com lookup hostname to resolve name to ip address and viceversa<br />\r\nwhois www.example.com lookup on Whois database\r\n	</p>\r\n	<p>\r\n		GO TOP INDEX ^<br />\r\nMicrosoft Windows networks (SAMBA)<br />\r\nnbtscan ip_addr netbios name resolution<br />\r\nnmblookup -A ip_addr netbios name resolution<br />\r\nsmbclient -L ip_addr/hostname show remote shares of a windows host<br />\r\nsmbget -Rr smb://ip_addr/share like wget can download files from a host windows via smb<br />\r\nmount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share mount a windows network share\r\n	</p>\r\n</div>','2013-06-11 10:23:33','2013-06-11 10:23:33'),(14,1,NULL,'Ubuntu 12.04发热超级厉害解决方法','<div class=\"entry-content\">\r\n	<p>\r\n		转自：http://www.linuxidc.com/Linux/2012-08/68081.htm<br />\r\nwin7下安装了ubuntu12.04系统，发现在win7下正常，但在ubuntu上发热很大，发现原来是独立显卡的问题，解决方法如下：<br />\r\n在终端下输入：<br />\r\nsudo su<br />\r\necho IGD &gt; /sys/kernel/debug/vgaswitcheroo/switch<br />\r\necho OFF &gt; /sys/kernel/debug/vgaswitcheroo/switch\r\n	</p>\r\n	<p>\r\n		其中：“第一句是切换到集成显卡，第二句是关掉没有连接的显卡“<br />\r\n将以下代码添加到/etc/rc.local里的exit 0之前以实现开机自动切换到集成显卡禁用独立显卡<br />\r\nsudo gedit /etc/rc.local<br />\r\n在exit 0之前添加：\r\n	</p>\r\n	<p>\r\n		echo IGD &gt; /sys/kernel/debug/vgaswitcheroo/switch\r\n	</p>\r\n	<p>\r\n		echo OFF &gt; /sys/kernel/debug/vgaswitcheroo/switch<br />\r\ncat /sys/kernel/debug/vgaswitcheroo/switch\r\n	</p>\r\n	<p>\r\n		显示如下：\r\n	</p>\r\n	<p>\r\n		0:DIS: :Off:0000:01:00.0\r\n	</p>\r\n	<p>\r\n		1:IGD:+:Pwr:0000:00:02.0\r\n	</p>\r\n	<p>\r\n		OFF行为关闭了的独显\r\n	</p>\r\n	<p>\r\n		OK了\r\n	</p>\r\n</div>','2013-06-11 10:24:33','2013-06-11 10:24:33'),(15,1,NULL,'将gem的安装地址指向淘宝镜像','1:命令行形式：<br />\r\n$ gem sources –remove https://rubygems.org/<br />\r\n<p>\r\n	$ gem sources -a http://ruby.taobao.org/\r\n</p>\r\n<p>\r\n	2:bundle\r\n</p>\r\n<p>\r\n	Gemfile 的第一行改成了\r\n</p>\r\nsource “http://ruby.taobao.org/”','2013-06-11 10:25:55','2013-06-11 10:25:55'),(16,1,NULL,'ubuntu下设置mysql为utf8','<div class=\"entry-content\">\r\n	<p>\r\n		转自：http://ltl3884.iteye.com/blog/809787\r\n	</p>\r\n	<p>\r\n		1.在终端输入命令 sudo gedit /etc/mysql/my.cnf在打开的文件中<br />\r\n找到［client]在下面加入<br />\r\ndefault-character-set=utf8<br />\r\n找到 [mysqld_safe]在下面加入<br />\r\ndefault-character-set=utf8<br />\r\n找到[mysqld]在下面加入<br />\r\ndefault-character-set=utf8<br />\r\ninit_connect=’SET NAMES utf8′<br />\r\n找到［mysql］在下面加入<br />\r\ndefault-character-set=utf8\r\n	</p>\r\n	<p>\r\n		2.在MYSQL命令行下，执行了set names utf8;\r\n	</p>\r\n	<p>\r\n		3.执行service mysql restart 重新启动maysql\r\n	</p>\r\n	<p>\r\n		4.在mysql下执行show variables like ‘character%’;\r\n	</p>\r\n	<p>\r\n		应该都是utf8了    除了character_set_database 这一项\r\n	</p>\r\n	<p>\r\n		你删除以前的database重新建立一个即可\r\n	</p>\r\n</div>','2013-06-11 10:27:14','2013-06-11 10:27:14'),(17,1,NULL,'vim常用快捷键','<div class=\"entry-content\">\r\n	<h2 id=\"menuIndex0\">\r\n		VIM的模式\r\n	</h2>\r\n	<p>\r\n		第一次使用VIM，会觉得无所适从，他并不像记事本，你敲什么键就显示什么，理解VIM的需要明白他的两种模式：\r\n	</p>\r\n	<ul>\r\n		<li>\r\n			命令模式 (Command Mode)\r\n		</li>\r\n		<li>\r\n			编辑模式 (Insert Mode)\r\n		</li>\r\n	</ul>\r\n	<p>\r\n		命令模式下，可以做移动、编辑操作；编辑模式则用来输入。键入i,o,s,a等即可进入编辑模式，后面解释原因。\r\n	</p>\r\n	<p>\r\n		模式的设计是VIM和其他编辑器最不同的地方，优势和劣势也全基于此而生。\r\n	</p>\r\n	<h2 id=\"menuIndex1\">\r\n		基本操作\r\n	</h2>\r\n	<p>\r\n		以下介绍的键盘操作，都是大小写敏感的，并且要在<strong>命令模式</strong>下完成，需注意：\r\n	</p>\r\n	<h3 id=\"menuIndex2\">\r\n		以字为单位的移动\r\n	</h3>\r\n	<ul>\r\n		<li>\r\n			h向左移动一个字\r\n		</li>\r\n		<li>\r\n			j向下移动一行\r\n		</li>\r\n		<li>\r\n			k向上\r\n		</li>\r\n		<li>\r\n			l向右\r\n		</li>\r\n	</ul>\r\n	<p>\r\n		这四个键在右手最容易碰到几个位置，最为常用。\r\n	</p>\r\n	<h3 id=\"menuIndex3\">\r\n		以词为单位的移动\r\n	</h3>\r\n	<ul>\r\n		<li>\r\n			w下一個word w(ord)\r\n		</li>\r\n		<li>\r\n			W下一個word(跳过标点)\r\n		</li>\r\n		<li>\r\n			b前一個word b(ackward)\r\n		</li>\r\n		<li>\r\n			B前一个word(跳过标点)\r\n		</li>\r\n		<li>\r\n			e跳到当前word的尾端 e(nd)\r\n		</li>\r\n	</ul>\r\n	<h3 id=\"menuIndex4\">\r\n		行移动\r\n	</h3>\r\n	<ul>\r\n		<li>\r\n			0跳到当前行的开头 –^跳到当前行第一个非空字符 –$跳到行尾\r\n		</li>\r\n	</ul>\r\n	<p>\r\n		助记：0(第0个字符),^和$含义同正则表达式\r\n	</p>\r\n	<h3 id=\"menuIndex5\">\r\n		段落移动\r\n	</h3>\r\n	<p>\r\n		-{上一段(以空白行分隔) –}下一段(以空白行分隔) –%跳到当前对应的括号上(适用各种配对符号)\r\n	</p>\r\n	<h3 id=\"menuIndex6\">\r\n		跳跃移动\r\n	</h3>\r\n	<ul>\r\n		<li>\r\n			/xxxx搜索xxxx，然后可以用n下一个，N上一个移动 –#向前搜索光标当前所在的字 –*向后搜索光标当前所在的字\r\n		</li>\r\n		<li>\r\n			fx在当前行移动到光标之后第一个字符x的位置 f(ind)x\r\n		</li>\r\n		<li>\r\n			gd跳到光标所在位置词(word)的定义位置 g(o)d(efine)\r\n		</li>\r\n		<li>\r\n			gg到文档顶部\r\n		</li>\r\n		<li>\r\n			G到文档底部\r\n		</li>\r\n		<li>\r\n			<img src=\"http://zhusan.qiniudn.com/icon_mad.gif\" alt=\":x\" class=\"wp-smiley\" /> 跳到第x行(x是行号)\r\n		</li>\r\n		<li>\r\n			ctrl+d向下翻页 d(down)\r\n		</li>\r\n		<li>\r\n			ctrl+u向上翻页 u(p)\r\n		</li>\r\n	</ul>\r\n	<h3 id=\"menuIndex7\">\r\n		基本编辑\r\n	</h3>\r\n	<h4 id=\"id39\">\r\n		修改\r\n	</h4>\r\n	<ul>\r\n		<li>\r\n			i在光标当前位置向前插入 i(nsert)\r\n		</li>\r\n		<li>\r\n			I在本行第一个字符前插入\r\n		</li>\r\n		<li>\r\n			a在光标当前位置向后插入 a(fter)\r\n		</li>\r\n		<li>\r\n			A在本行末尾插入\r\n		</li>\r\n		<li>\r\n			o向下插入一行\r\n		</li>\r\n		<li>\r\n			O向上插入一行\r\n		</li>\r\n		<li>\r\n			:w保存\r\n		</li>\r\n		<li>\r\n			:q退出\r\n		</li>\r\n		<li>\r\n			:wq保存并退出\r\n		</li>\r\n	</ul>\r\n	<h4 id=\"id40\">\r\n		删除\r\n	</h4>\r\n	<ul>\r\n		<li>\r\n			x删除当前字符\r\n		</li>\r\n		<li>\r\n			dd删除当前行 d(elete)\r\n		</li>\r\n		<li>\r\n			dw删除当前光标下的词 d(elete)w(ord)\r\n		</li>\r\n	</ul>\r\n	<h4 id=\"id41\">\r\n		复制粘贴\r\n	</h4>\r\n	<ul>\r\n		<li>\r\n			yy复制当前行 y(ank)\r\n		</li>\r\n		<li>\r\n			yw复制当前光标下的词 y(ank)w(ord)\r\n		</li>\r\n		<li>\r\n			p粘贴 p(aste)\r\n		</li>\r\n		<li>\r\n			P粘贴在当前位置之前\r\n		</li>\r\n	</ul>\r\n	<h2 id=\"menuIndex8\">\r\n		进阶操作\r\n	</h2>\r\n	<p>\r\n		限于篇幅，在这里我仅介绍下我非常常用的几个操作。\r\n	</p>\r\n	<h3 id=\"menuIndex9\">\r\n		重复操作\r\n	</h3>\r\n	<p>\r\n		因为VIM所有的操作都是原子化的，所以把这些操作程序化就非常简单了：\r\n	</p>\r\n	<ul>\r\n		<li>\r\n			5w相当于按五次w键；\r\n		</li>\r\n		<li>\r\n			6j下移6行，相当于按六次j；\r\n		</li>\r\n		<li>\r\n			3J大写J,本来是将下一行与当前行合并，加上数量，就是重复操作3次；\r\n		</li>\r\n		<li>\r\n			6dw和d6w结果是一样，就是删除6个word； – 剩下的无数情况，自己类推吧。\r\n		</li>\r\n	</ul>\r\n	<h3 id=\"menuIndex10\">\r\n		高效编辑\r\n	</h3>\r\n	<ul>\r\n		<li>\r\n			di\"光标在”“之间，则删除”“之间的内容\r\n		</li>\r\n		<li>\r\n			yi(光标在()之间，则复制()之间的内容\r\n		</li>\r\n		<li>\r\n			vi[光标在之间，则选中之间的内容\r\n		</li>\r\n		<li>\r\n			以上三种可以自由组合搭配，效率奇高，i(nner)\r\n		</li>\r\n		<li>\r\n			dtx删除字符直到遇见光标之后的第一个x字符\r\n		</li>\r\n		<li>\r\n			ytx复制字符直到遇见光标之后的第一个x字符\r\n		</li>\r\n	</ul>\r\n	<h3 id=\"menuIndex11\">\r\n		标记和宏(macro)\r\n	</h3>\r\n	<ul>\r\n		<li>\r\n			ma将当前位置标记为a，26个字母均可做标记，mb、mc等等；\r\n		</li>\r\n		<li>\r\n			\'a跳转到a标记的位置； – 这是一组很好的文档内标记方法，在文档中跳跃编辑时很有用；\r\n		</li>\r\n		<li>\r\n			qa将之后的所有键盘操作录制下来，直到再次在命令模式按下q，并存储在a中；\r\n		</li>\r\n		<li>\r\n			@a执行刚刚记录在a里面的键盘操作；\r\n		</li>\r\n		<li>\r\n			@@执行上一次的macro操作；\r\n		</li>\r\n		<li>\r\n			宏操作是VIM最为神奇的操作之一，需要慢慢体会其强大之处；\r\n		</li>\r\n	</ul>\r\n	<p>\r\n		VIM的基本操作，可以挖掘的东西非常多，不仅仅需要记忆，更需要自己去探索总结，熟练之后，效率会大幅度提升。后面会给出一些参考链接。\r\n	</p>\r\n</div>','2013-06-11 10:27:47','2013-06-11 10:27:47'),(18,1,NULL,'oracle、sqlserver、mysql常用函数对比[to_char、to_number、to_date]','<div class=\"entry-content\">\r\n	<p>\r\n		oracle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; –&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mysql\r\n	</p>\r\n	<p>\r\n		to_char(sysdate,’yyyy-mm-dd’)–&gt;date_format(sysdate(),’%Y-%m-%d’);<br />\r\nto_date(sysdate,’yyyy-mm-dd’)–&gt;STR_TO_DATE(sysdate(),’%Y-%m-%d’);\r\n	</p>\r\n	<p>\r\n		1.oracle\r\n	</p>\r\n	<p>\r\n		（1）使用TO_CHAR函数处理数字\r\n	</p>\r\n	<p>\r\n		TO_CHAR(number, ‘格式’)\r\n	</p>\r\n	<p>\r\n		TO_CHAR(salary,’$99,999.99’);\r\n	</p>\r\n	<p>\r\n		（2）使用TO_CHAR函数处理日期<br />\r\nTO_CHAR(date,’格式’);<br />\r\nto_char(sysdate,’q\') &nbsp; 季<br />\r\nto_char(sysdate,’yyyy’)年<br />\r\nto_char(sysdate,’mm’)月<br />\r\nto_char(sysdate,’dd’)日<br />\r\nto_char(sysdate,’d\')星期中的第几天<br />\r\nto_char(sysdate,’DAY’)星期几<br />\r\nto_char(sysdate,’ddd’)一年中的第几天\r\n	</p>\r\n	<p>\r\n		（3）TO_NUMBER<br />\r\n使用TO_NUMBER函数将字符转换为数字<br />\r\nTO_NUMBER(char[, \'格式\'])<br />\r\n（4） TO_DATE<br />\r\n使用TO_DATE函数将字符转换为日期<br />\r\nTO_DATE(char[, \'格式\'])<br />\r\n——————————————————————————————<br />\r\n2.sql\r\n	</p>\r\n	<p>\r\n		1)类型转换：Cast（）类型转换，例：Cast(@startdate as datetime)，Cast(name as nvarchar)<br />\r\n2)日期截取：Datepart()返回代表指定日期的指定日期部分的整数，例：<br />\r\nDatepart(Dd,@startdate)–取日，<br />\r\nDatepart(Month,@startdate)–取月，<br />\r\nDatepart(Yy,@startdate)–取年\r\n	</p>\r\n	<p>\r\n		3)日期操作：Dateadd（）在向一个日期加上一个段时间的基础上，返回新的datetime类型。例：加2天 Dateadd（day,2,’2009-6-1′）返回：2009-6-3 00:00:00.000\r\n	</p>\r\n	<p>\r\n		&nbsp;\r\n	</p>\r\n	<p>\r\n		——————————————————————————————\r\n	</p>\r\n	<p>\r\n		&nbsp;\r\n	</p>\r\n	<p>\r\n		3.mysql\r\n	</p>\r\n	<p>\r\n		日期格式转换：date_format(date,format), time_format(time,format)\r\n	</p>\r\n	<p>\r\n		1)使用DATE_FORMAT(数据库字段,’%Y%m%d’)将时间类型字段格式为”yyyy-mm-dd”字符串格式\r\n	</p>\r\n	<p>\r\n		2)str_to_date(数据库字段,’%m.%d.%Y’)将字符串类型字段格式为”yyyy-mm-dd”时间格式\r\n	</p>\r\n	<p>\r\n		3)mysql&gt; select date_format(’2008-08-08 22:23:00′, ‘%W %M %Y’);\r\n	</p>\r\n	<p>\r\n		+————————————————+<br />\r\n| date_format(’2008-08-08 22:23:00′, ‘%W %M %Y’) |<br />\r\n+————————————————+<br />\r\n| Friday August 2008 |<br />\r\n+————————————————+\r\n	</p>\r\n	<p>\r\n		mysql&gt; select date_format(’2008-08-08 22:23:01′, ‘%Y%m%d%H%i%s’);\r\n	</p>\r\n	<p>\r\n		+—————————————————-+<br />\r\n| date_format(’2008-08-08 22:23:01′, ‘%Y%m%d%H%i%s’) |<br />\r\n+—————————————————-+<br />\r\n| 20080808222301 |<br />\r\n+—————————————————-+\r\n	</p>\r\n	<p>\r\n		mysql&gt; select time_format(’22:23:01′, ‘%H.%i.%s’);\r\n	</p>\r\n	<p>\r\n		+————————————-+<br />\r\n| time_format(’22:23:01′, ‘%H.%i.%s’) |<br />\r\n+————————————-+<br />\r\n| 22.23.01 |<br />\r\n+————————————-+<br />\r\nMySQL 日期、时间转换函数：date_format(date,format), time_format(time,format) 能够把一个日期/时间转换成各种各样的字符串格式。它是 str_to_date(str,format) 函数的 一个逆转换。\r\n	</p>\r\n	<p>\r\n		4)\r\n	</p>\r\n<pre id=\"best-answer-content\">TO_NUMBER用cast就可,但要填适当的类型,示例:\r\n\r\nselect cast(11 as unsigned int) /*整型*/\r\n\r\nselect cast(11 as decimal(10,2)) /*浮点型*/</pre>\r\n</div>','2013-06-11 10:30:37','2013-06-11 10:30:37'),(19,1,NULL,'利用ubuntu搭建一个pptp的vpn服务器','<div class=\"entry-content\">\r\n	<p>\r\n		1.下载安装<br />\r\napt-get install pptpd\r\n	</p>\r\n	<p>\r\n		2.配置/etc/pptpd.conf<br />\r\nvim /etc/pptpd.conf<br />\r\n添加下面两行(在配置文件的最后取消注释修改IP即可)<br />\r\nlocalip 172.16.17.63&nbsp; #这个就是你当前主机的IP地址<br />\r\nRemoteip 10.0.0.2-100&nbsp; #这个就是给客户端分配置的IP地址池\r\n	</p>\r\n	<p>\r\n		3.添加DNS<br />\r\ncd /etc/ppp<br />\r\nvim options<br />\r\nms-dns 172.16.10.5<br />\r\nms-dns 8.8.8.8\r\n	</p>\r\n	<p>\r\n		4.添加服务器的名称<br />\r\nvim pptpd-options<br />\r\nname 172.16.17.63\r\n	</p>\r\n	<p>\r\n		5.服务端的用户各密码的配置<br />\r\nvim chap-secrets<br />\r\n“tao”&nbsp;&nbsp;&nbsp; 172.16.17.63&nbsp;&nbsp; “tao”&nbsp;&nbsp;&nbsp; *<br />\r\n这个是用户名&nbsp; 服务器名(可以设置为*)&nbsp; 密码&nbsp; 允许登录的Ip地址\r\n	</p>\r\n	<p>\r\n		6.查看运行的端口<br />\r\nnetstat -tnlpu |grep pptpd<br />\r\n可以看到1723端口开户<br />\r\necho 1 &gt; /proc/sys/net/ipv4/ip_forward #修改内核设置，使其支持转发<br />\r\n要想永久生效的话<br />\r\nvim /etc/sysctl.conf<br />\r\nnet.ipv4.ip_forward = 1 #将后面值改为1，然后保存文件<br />\r\nsysctl –p #马上生效\r\n	</p>\r\n	<p>\r\n		7，不加这条只能访问内网资源，加了可访问外网<br />\r\niptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o eth0 -j MASQUERADE\r\n	</p>\r\n	<p>\r\n		8.重启pptpd服务否则客户端获取的IP段不生效<br />\r\n/etc/init.d/pptpd restart\r\n	</p>\r\n	<p>\r\n		但是，只是这样，iptables 的规则会在下次重启时被清除，所以我们还需要把它保存下来，方法是使用 iptables-save 命令：<br />\r\nsudo iptables-save &gt; /etc/iptables-rules<br />\r\n然后修改 /etc/network/interfaces 文件，找到 eth0 那一节，在对 eth0 的设置最末尾加上下面这句：<br />\r\npre-up iptables-restore &lt; /etc/iptables-rules<br />\r\n这样当网卡 eth0 被加载的时候就会自动载入我们预先用 iptables-save 保存下的配置。<br />\r\n到此，一个 VPN Server/Gateway 基本就算架设完毕。当然，也许你按照我的方法做了，还是无法成功，那么下面总结一些我碰到的问题和解决方案：<br />\r\n无法建立 VPN 连接<br />\r\n安装好 pptpd 并设置后，客户端还是无法建立到服务器的连接。造成的原因可能有以下几种：<br />\r\n1. 服务器端的防火墙设置：PPTP 服务需要使用 1723(tcp) 端口和 gre 协议，因此请确保您的防火墙设置允许这两者通行。<br />\r\n2. 如果服务器在路由器后面，请确保路由器上做好相应的设置和端口转发。<br />\r\n3. 如果服务器在路由器后面，那么请确保你的服务器支持 VPN Passthrough。<br />\r\n4. 如果客户端在路由器后面，那么客户端所使用的路由器也必须支持 VPN Passthrough。其实市面上稍微好点的路由器都是支持 VPN \r\nPassthrough 的，当然也不排除那些最最最便宜的便宜货确实不支持。当然，如果你的路由器可以刷 DD-Wrt 的话就刷上吧，DD-Wrt \r\n是支持的。<br />\r\n能建立链接，但“几乎”无法访问互联网<br />\r\n这里我使用“几乎”这个词，是因为并不是完全不能访问互联网。症状为，打开 Google 搜索没问题，但其它网站均无法打开；SSH 可用，但 scp\r\n 不行；ftp 能握手，但传不了文件。我就遇到了这种情况，仔细 Google 后发现原来是 MTU 的问题，用 ping \r\n探测了一下果然是包过大了。知道问题就好办了，我们可以通过 iptables 来修正这一问题。具体原理就不讲了，需要的自己 \r\nGoogle。这里只说解决方案，在 filter 表中添加下面的规则：<br />\r\nsudo iptables -A FORWARD -s 10.100.0.0/24 -p tcp -m tcp –tcp-flags SYN,RST SYN<br />\r\n-j TCPMSS –set-mss 1200<br />\r\n上面规则中的 1200 可以根据你的实际情况修改，为了保证最好的网络性能，这个值应该不断修改，直至能保证网络正常使用情况下的最大值。<br />\r\n好了，至此，一台单网卡 pptp-server 就算完成了。\r\n	</p>\r\n</div>','2013-06-11 10:31:23','2013-06-11 10:31:23'),(20,1,NULL,'如何快速正确的安装 Ruby, Rails 运行环境','<div class=\"entry-content\">\r\n	<p>\r\n		转自：http://ruby-china.org/wiki/install_ruby_guide\r\n	</p>\r\n	<p>\r\n		对于新入门的开发者，如何安装 Ruby, Ruby Gems 和 Rails 的运行环境可能会是个问题，本页主要介绍如何用一条靠谱的路子快速安装 Ruby 开发环境。<br />\r\n次安装方法同样适用于产品环境！\r\n	</p>\r\n	<h2>\r\n		系统需求\r\n	</h2>\r\n	<p>\r\n		首先确定操作系统环境，不建议在 Windows 上面搞，所以你需要用:\r\n	</p>\r\n	<ul>\r\n		<li>\r\n			Mac OS X\r\n		</li>\r\n		<li>\r\n			任意 Linux 发行版本(<a href=\"http://ubuntu.com/\">Ubuntu</a>,<a href=\"http://www.centos.org/\">CentOS</a>, Redhat, ArchLinux …)\r\n		</li>\r\n	</ul>\r\n	<blockquote>\r\n		<p>\r\n			强烈新手使用 Ubuntu 省掉不必要的麻烦！\r\n		</p>\r\n	</blockquote>\r\n	<p>\r\n		<strong>以下代码区域，带有 $ 打头的表示需要在控制台（终端）下面执行（不包括 $ 符号）</strong>\r\n	</p>\r\n	<h2>\r\n		步骤0 － 安装系统需要的包\r\n	</h2>\r\n	<ul>\r\n		<li>\r\n			Mac 请安装&nbsp;<a href=\"http://developer.apple.com/xcode/\">Xcode</a>&nbsp;开发工具，它将帮你安装好 Unix 环境需要的开发包\r\n		</li>\r\n		<li>\r\n			Ubuntu 请安装\r\n		</li>\r\n	</ul>\r\n<pre>$ sudo apt-get install -y build-essential openssl curl libcurl3-dev libreadline6 libreadline6-dev git zlib1g zlib1g-dev libssl-dev libyaml-dev libxml2-dev libxslt-dev autoconf automake libtool imagemagick libmagickwand-dev libpcre3-dev libsqlite3-dev libmysql-ruby libmysqlclient-dev</pre>\r\n	<h2>\r\n		步骤1 － 安装 RVM\r\n	</h2>\r\n	<p>\r\n		RVM 是干什么的这里就不解释了，后面你将会慢慢搞明白。\r\n	</p>\r\n<pre>$ curl -L https://get.rvm.io | bash -s stable</pre>\r\n	<p>\r\n		等待一段时间后就可以成功安装好 RVM。\r\n	</p>\r\n	<p>\r\n		然后，载入 RVM 环境（新开 Termal 就不用这么做了，会自动重新载入的）\r\n	</p>\r\n<pre>$ source ~/.rvm/scripts/rvm</pre>\r\n	<p>\r\n		检查一下是否安装正确\r\n	</p>\r\n<pre>$ rvm -v\r\nrvm 1.17.3 (stable) by Wayne E. Seguin &lt;wayneeseguin@gmail.com&gt;, Michal Papis &lt;mpapis@gmail.com&gt; [https://rvm.io/]</pre>\r\n	<h2>\r\n		步骤2 － 用 RVM 安装 Ruby 环境\r\n	</h2>\r\n<pre># 替换 Ruby 下载地址到国内淘宝镜像服务器\r\n$ sed -i -e \'s/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g\' ~/.rvm/config/db\r\n# 安装 readline 包\r\n$ rvm pkg install readline\r\n# 安装 Ruby 2.0.0\r\n$ rvm install 2.0.0 --with-readline-dir=$rvm_path/usr</pre>\r\n	<p>\r\n		或者可以安装 1.8.7 版本，也可以是 1.9.3，只要将后面的版本号跟换一下就可以了<br />\r\n同样继续等待漫长的下载，编译过程，完成以后，Ruby, Ruby Gems 就安装好了。\r\n	</p>\r\n	<h2>\r\n		步骤3 － 设置 Ruby 版本\r\n	</h2>\r\n	<p>\r\n		RVM 装好以后，需要执行下面的命令将指定版本的 Ruby 设置为系统默认版本\r\n	</p>\r\n<pre>$ rvm 2.0.0 --default</pre>\r\n	<p>\r\n		同样，也可以用其他版本号，前提是你有用 rvm install 安装过那个版本\r\n	</p>\r\n	<p>\r\n		这个时候你可以测试是否正确\r\n	</p>\r\n<pre>$ ruby -v\r\nruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-darwin12.3.0]\r\n$ gem -v\r\n2.0.0\r\n$ gem source -r https://rubygems.org/\r\n$ gem source -a http://ruby.taobao.org</pre>\r\n	<h2>\r\n		步骤4 － 安装 Rails 环境\r\n	</h2>\r\n	<p>\r\n		上面 3 个步骤过后，Ruby 环境就安装好了，接下来安装 Rails\r\n	</p>\r\n<pre>$ gem install bundler rails</pre>\r\n	<p>\r\n		然后测试安装是否正确\r\n	</p>\r\n<pre>$ bundle -v\r\nBundler version 1.0\r\n$ rails -v\r\nRails 3.2.13</pre>\r\n	<hr />\r\n	<p>\r\n		然后开始你的 Ruby，Rails 之旅吧。<br />\r\n欢迎来到 Ruby 的世界！\r\n	</p>\r\n	<h2>\r\n		其他资源\r\n	</h2>\r\n	<p>\r\n		<a href=\"https://github.com/huacnlee/init.d\" target=\"_blank\">https://github.com/huacnlee/init.d</a>&nbsp;- 快速安装生产环境的 Ubuntu Server 批量脚本\r\n	</p>\r\n</div>','2013-06-11 10:32:27','2013-06-11 10:32:27'),(21,1,NULL,'vim快捷键','<div class=\"entry-content\">\r\n	<h3>\r\n		键盘移动 (Move)\r\n	</h3>\r\n	<p>\r\n		一切都从键盘的移动<br />\r\nk&nbsp;-&gt; 上 up<br />\r\nj&nbsp;-&gt; 下 down<br />\r\nh&nbsp;-&gt; 左 left<br />\r\nl&nbsp;-&gt; 右 right<br />\r\nz&nbsp;-&gt; 重画屏幕，当前光标变成屏幕的第一行 (redraw current line at top of window)<br />\r\nCTRL-f&nbsp;-&gt; 跳到下一页 (page down)<br />\r\nCTRL-b&nbsp;-&gt; 跳到上一页 (page up)\r\n	</p>\r\n	<h3>\r\n		跳跃指令 (jumps)\r\n	</h3>\r\n	<p>\r\n		跳跃指令类似于游览器中的&lt;前进&gt;&lt;后退&gt;按钮<br />\r\nCTRL-]&nbsp;-&gt; 跟着link/tag转入 (follow link/tag)<br />\r\nCTRL-o&nbsp;-&gt; 回到上一次的jump (go back)<br />\r\nCTRL-i&nbsp;-&gt; 跳回下一个 (go forward)<br />\r\n:ju&nbsp;-&gt; 显示所有的可以跳跃的地方 (print jump list)\r\n	</p>\r\n	<h3>\r\n		重做/回复\r\n	</h3>\r\n	<p>\r\n		u&nbsp;-&gt; undo<br />\r\nCTRL-r&nbsp;-&gt; redo<br />\r\nvim的undo是树结构的，你可以回到这个结构中的任何地方<br />\r\n:undo 2&nbsp;-&gt; undo 到结构的2层 (undo to tree 2)<br />\r\n:undolist&nbsp;-&gt; 显示所有的undo列表 (show undo list)<br />\r\n:earlier&nbsp;10s -&gt; undo到10秒前的编辑 (undo to 10 seconds ago)<br />\r\n:earlier&nbsp;10h -&gt; undo到10小时前的编辑 (back to 10 hours ago)<br />\r\n:earlier&nbsp;1m -&gt; undo到1分钟前 (back to 1 minutes ago)<br />\r\n下面是undo的tree结构的解释<br />\r\n………..one<br />\r\n…………. |<br />\r\n……..change 1<br />\r\n…………. |<br />\r\n………one too<br />\r\n………. /……..\\<br />\r\n…..change 2 ……. change 3<br />\r\n………… | ………………… |<br />\r\n…….one two ………. me too<br />\r\n……….. |<br />\r\n….. change 4<br />\r\n………..|<br />\r\n…… not two\r\n	</p>\r\n	<h3>\r\n		视觉模式 (visual)\r\n	</h3>\r\n	<p>\r\n		v&nbsp;-&gt; 进入视觉模式<br />\r\n在视觉模式内可以作block的编辑<br />\r\nCTRL-v&nbsp;-&gt; visual block\r\n	</p>\r\n	<h3>\r\n		打印 (print)\r\n	</h3>\r\n	<p>\r\n		:hardcopy&nbsp;-&gt; 打印vim中的内容 (print text)<br />\r\n混合视觉模式 (visual) 可以选择打印的区域<br />\r\n没试过是否可以直接给值打印（应该可以）例如 :1,15hardcopy 打印前15行\r\n	</p>\r\n	<h3>\r\n		将文件写成网页格式 (html)\r\n	</h3>\r\n	<p>\r\n		:source $VIMRUNTIME/syntax/2html.vim&nbsp;-&gt; change current open file to html\r\n	</p>\r\n	<h3>\r\n		格式 (format)\r\n	</h3>\r\n	<p>\r\n		dos/windows跟unix/linux对于文件的结束是不一样的。vim可以直接设定/更改格式<br />\r\n用纸令:set fileformats=unix,dos&nbsp;可以改变文件的格式 (change format)\r\n	</p>\r\n	<p>\r\n		:set ff=unix&nbsp;-&gt; 设定文件成unix格式 (set file in unix format)<br />\r\n:set ff=dos&nbsp;-&gt; 设定文件成dos格式 (set file in dos format)<br />\r\n:set ff?&nbsp;-&gt; 检查当前文件格式 (check the format of current file)<br />\r\n如果改变格式，直接:w存档就会存成新的格式了。\r\n	</p>\r\n	<h3>\r\n		加密 (encryption)\r\n	</h3>\r\n	<p>\r\n		vim可以给文件加密码<br />\r\nvim -x&nbsp;文件名 (filename) -&gt; 输入2次密码，保存后文件每次都会要密码才能进入 (encrypt the file with password)<br />\r\nvim \r\n处理加密文件的时候，并不会作密码验证，也就是说，当你打开文件的时候，vim不管你输入的密码是否正确，直接用密码对本文进行解密。如果密码错误，你看\r\n到的就会是乱码，而不会提醒你密码错误（这样增加了安全性，没有地方可以得知密码是否正确）当然了，如果用一个够快的机器作穷举破解，vim还是可以揭开\r\n 的\r\n	</p>\r\n	<h3>\r\n		vim 语法显示 (syntax)\r\n	</h3>\r\n	<p>\r\n		:syntax enable&nbsp;-&gt; 打开语法的颜色显示 (turn on syntax color)<br />\r\n:syntax clear&nbsp;-&gt; 关闭语法颜色 (remove syntax color)<br />\r\n:syntax off&nbsp;-&gt; 完全关闭全部语法功能 (turn off syntax)<br />\r\n:syntax manual&nbsp;-&gt; 手动设定语法 (set the syntax manual, when need syntax use :set syntax=ON)\r\n	</p>\r\n	<h3>\r\n		输入特殊字符 (special character)\r\n	</h3>\r\n	<p>\r\n		CTRL-v&nbsp;编码就可以了<br />\r\n例如&nbsp;CTRL-v 273 -&gt;&nbsp;ÿ 得到 ÿ\r\n	</p>\r\n	<h3>\r\n		二进 制文件 (binary file)\r\n	</h3>\r\n	<p>\r\n		vim可以显示，编辑2进位文件\r\n	</p>\r\n	<p>\r\n		vim -b datafile<br />\r\n:set display=uhex&nbsp;-&gt; 这样会以uhex显示。用来显示一些无法显示的字符（控制字符之类）(display in uhex play non-display char)\r\n	</p>\r\n	<p>\r\n		:%!xxd&nbsp;-&gt; 更改当前文件显示为2进位 (change display to binary)<br />\r\n:%!xxd -r&nbsp;-&gt; 更改二进位为text格式 (convert back to text)\r\n	</p>\r\n	<h3>\r\n		自动完成 (auto-completion)\r\n	</h3>\r\n	<p>\r\n		vim本身有自动完成功能（这里不是说ctag，而是vim内建的）<br />\r\nCTRL-p&nbsp;-&gt; 向后搜索自动完成 (search backward)<br />\r\nCTRL-n&nbsp;-&gt; 向前搜索自动完成 (search forward)<br />\r\nCTRL-x+CTRL-o&nbsp;-&gt; 代码自动补全 (code completion)\r\n	</p>\r\n	<h3>\r\n		自动备份 (backup)\r\n	</h3>\r\n	<p>\r\n		vim可以帮你自动备份文件（储存的时候，之前的文件备份出来）<br />\r\n:set backup&nbsp;-&gt; 开启备份，内建设定备份文件的名字是 源文件名加一个 ‘~’ (enable backup default filename+~)<br />\r\n:set backupext=.bak&nbsp;-&gt; 设定备份文件名为源文件名.bak (change backup as filename.bak)\r\n	</p>\r\n	<p>\r\n		自动备份有个问题就是，如果你多次储存一个文件，那么这个你的备份文件会被不断覆盖，你只能有最后一次存文件之前的那个备份。没关系，vim还提 供了patchmode，这个会把你第一次的原始文件备份下来，不会改动<br />\r\n:set patchmode=.orig&nbsp;-&gt; 保存原始文件为 文件名.orig (keep orignal file as filename.orig)\r\n	</p>\r\n	<h3>\r\n		开启，保存与退出 （save &amp; exit)\r\n	</h3>\r\n	<p>\r\n		:w&nbsp;-&gt; 保存文件 (write file)<br />\r\n:w!&nbsp;-&gt; 强制保存 (force write)<br />\r\n:q&nbsp;-&gt; 退出文件 (exit file without save)<br />\r\n:q!&nbsp;-&gt; 强制退出 (force quite without save)<br />\r\n:e filename&nbsp;-&gt; 打开一个文件名为filename的文件 (open file to edit)<br />\r\n:e! filename&nbsp;-&gt; 强制打开一个文件，所有未保存的东西会丢失 (force open, drop dirty buffer)<br />\r\n:saveas filename&nbsp;-&gt; 另存为 filename (save file as filename)\r\n	</p>\r\n	<h3>\r\n		编辑指令 (edit)\r\n	</h3>\r\n	<p>\r\n		a&nbsp;-&gt; 在光表后插入 (append after cursor)<br />\r\nA&nbsp;-&gt; 在一行的结尾插入 (append at end of the line)<br />\r\ni&nbsp;-&gt; 在光标前插入 (insert before cursor)<br />\r\nI&nbsp;-&gt; 在第一个非空白字符前插入 (insert before first non-blank)<br />\r\no&nbsp;-&gt; 光标下面插入一个新行 (open line below)<br />\r\nO&nbsp;-&gt; 光标上面插入一个新行 (open line above)<br />\r\nx&nbsp;-&gt; 删除光标下（或者之后）的东西 (delete under and after cursor)<br />\r\n例如x就是删除当前光标下，3x就是删除光标下+光标后2位字符<br />\r\nX&nbsp;-&gt; 删除光标前的字符 (delete before cursor)<br />\r\nd&nbsp;-&gt; 删除 (delete)<br />\r\n可以用dd删除一行，或者3dw删除3个词等等<br />\r\nJ&nbsp;-&gt; 将下一行提到这行来 (join line)<br />\r\nr&nbsp;-&gt; 替换个字符 (replace characters)<br />\r\nR&nbsp;-&gt; 替换多个字符 (replace mode – continue replace)<br />\r\ngr&nbsp;-&gt; 不影响格局布置的替换 (replace without affecting layout)<br />\r\nc&nbsp;-&gt; 跟d键一样，但是删除后进入输入模式 (same as “d” but after delete, in insert mode)<br />\r\nS&nbsp;-&gt; 删除一行(好像dd一样）但是删除后进入输入模式 (same as “dd” but after delete, in insert mode)<br />\r\ns&nbsp;-&gt; 删除字符，跟(d)一样，但是删除后进入输入模式 (same as “d” but after delete, in insert mode)<br />\r\ns4s&nbsp;会删除4个字符，进入输入模式 (delete 4 char and put in insert mode)<br />\r\n~&nbsp;-&gt; 更改大小写，大变小，小变大 (change case upper-&gt; lower or lower-&gt;upper)<br />\r\ngu&nbsp;-&gt; 变成小写 (change to lower case)<br />\r\n例如&nbsp;guG&nbsp;会把光标当前到文件结尾全部变成小写 (change lower case all the way to the end)<br />\r\ngU&nbsp;-&gt; 变成大写 (change to upper case)<br />\r\n例如&nbsp;gUG&nbsp;会把光标当前到文件结尾全部变成大写 (change upper case all the way to the end)\r\n	</p>\r\n	<h3>\r\n		复制与粘贴 (copy &amp; paste)\r\n	</h3>\r\n	<p>\r\n		y&nbsp;-&gt; 复制 (yank line)<br />\r\nyy&nbsp;-&gt; 复制当前行 (yank current line)<br />\r\n“{a-zA-Z}y&nbsp;-&gt; 把信息复制到某个寄存中 (yank the link into register {a-zA-Z})<br />\r\n例如我用&nbsp;“ayy&nbsp;那么在寄存a，就复制了一行，然后我再用“byw复制一个词在寄存b<br />\r\n粘贴的时候，我可以就可以选择贴a里面的东西还是b里面的，这个就好像是多个复制版一样<br />\r\n“*y&nbsp;-&gt; 这个是把信息复制进系统的复制版（可以在其他程序中贴出来）(yank to OS buffer)<br />\r\np&nbsp;-&gt; 当前光标下粘贴 (paste below)<br />\r\nP&nbsp;-&gt; 当前光标上粘贴 (paste above)<br />\r\n“{a-zA-Z}p&nbsp;-&gt; 将某个寄存的内容贴出来 (paste from register)<br />\r\n例如“ap那么就在当前光标下贴出我之前在寄存a中 的内容。“bP就在当前光标上贴出我之前寄存b的内容<br />\r\n“*p&nbsp;-&gt; 从系统的剪贴板中读取信息贴入vim (paste from OS buffer to vim)<br />\r\nreg&nbsp;-&gt; 显示所有寄存中的内容 (list all registers)\r\n	</p>\r\n	<h3>\r\n		书签 (Mark)\r\n	</h3>\r\n	<p>\r\n		书签是vim中非常强大的一个功能，书签分为文件书签跟全局书签。文件书签是你标记文件中的不同位置，然后可以在文件内快速跳转到你想要的位置。 而全局书签是标记不同文件中的位置。也就是说你可以在不同的文件中快速跳转\r\n	</p>\r\n	<p>\r\n		m{a-zA-Z}&nbsp;-&gt; 保存书签，小写的是文件书签，可以用(a-z）中的任何字母标记。大写的是全局 \r\n书签，用大写的(A-Z)中任意字母标记。(mark position as bookmark. when lower, only stay in\r\n file. when upper, stay in global)<br />\r\n‘{a-zA-Z}&nbsp;-&gt; 跳转到某个书签。如果是全局书签，则会开启被书签标记的文件跳转至标记的行 (go to mark. in file\r\n {a-z} or global {A-Z}. in global, it will open the file)<br />\r\n’0&nbsp;-&gt; 跳转入现在编辑的文件中上次退出的位置 (go to last exit in file)<br />\r\n”&nbsp;-&gt; 跳转如最后一次跳转的位置 (go to last jump -&gt; go back to last jump)<br />\r\n‘”&nbsp;-&gt; 跳转至最后一次编辑的位置 (go to last edit)<br />\r\ng’{mark}&nbsp;-&gt; 跳转到书签 (jump to {mark})<br />\r\n:delm{marks}&nbsp;-&gt; 删除一个书签 (delete a mark) 例如:delma那么就删除了书签a<br />\r\n:delm!&nbsp;-&gt; 删除全部书签 (delete all marks)<br />\r\n:marks&nbsp;-&gt; 显示系统全部书签 (show all bookmarks)\r\n	</p>\r\n	<h3>\r\n		标志 (tag)\r\n	</h3>\r\n	<p>\r\n		:ta&nbsp;-&gt; 跳转入标志 (jump to tag)<br />\r\n:ts&nbsp;-&gt; 显示匹配标志，并且跳转入某个标志 (list matching tags and select one to jump)<br />\r\n:tags&nbsp;-&gt; 显示所有标志 (print tag list)\r\n	</p>\r\n	<h3>\r\n		运行外部命令 (using an external program)\r\n	</h3>\r\n	<p>\r\n		:!&nbsp;-&gt; 直接运行shell中的一个外部命令 (call any external program)<br />\r\n:!make&nbsp;-&gt; 就直接在当前目录下运行make指令了 (run make on current path)<br />\r\n:r !ls&nbsp;-&gt; 读取外部运行的命令的输入，写入当然vim中。这里读取ls的输出 (read the output of ls and append the result to file)<br />\r\n:3r !date -u&nbsp;-&gt; 将外部命令date -u的结果输入在vim的第三行中 (read the date -u, and append result to 3rd line of file)\r\n	</p>\r\n	<p>\r\n		:w !wc&nbsp;-&gt; 将vim的内容交给外部指令来处理。这里让wc来处理vim的内容 (send vim’s file to \r\nexternal command. this will send the current file to wc command)<br />\r\nvim对于常用指令有一些内建，例如wc (算字数）(vim has some buildin functions, such like wc)<br />\r\ng CTRL-G&nbsp;-&gt; 计算当前编译的文件的字数等信息 (word count on current buffer)<br />\r\n!!date&nbsp;-&gt; 插入当前时间 (insert current date)\r\n	</p>\r\n	<h3>\r\n		多个文件的编辑 (edit multifiles)\r\n	</h3>\r\n	<p>\r\n		vim可以编辑多个文件，例如<br />\r\nvim a.txt b.txt c.txt&nbsp;就打开了3个文件\r\n	</p>\r\n	<p>\r\n		:next&nbsp;-&gt; 编辑下一个文件 (next file in buffer)<br />\r\n:next! -&gt; 强制编辑下个文件，这里指如果更改了第一个文件 (force to next file in buffer if current buffer changed)<br />\r\n:wnext -&gt; 保存文件，编辑下一个 (save the file and goto next)<br />\r\n:args&nbsp;-&gt; 查找目前正在编辑的文件名 (find out which buffer is editing now)<br />\r\n:previous&nbsp;-&gt; 编辑上个文件 (previous buffer)<br />\r\n:previous!&nbsp;-&gt; 强制编辑上个文件，同 :next! (force to previous buffer, same as :next!)<br />\r\n:last&nbsp;-&gt; 编辑最后一个文件 (last buffer)<br />\r\n:first&nbsp;-&gt; 编辑最前面的文件 (first buffer)<br />\r\n:set autowrite&nbsp;-&gt; 设定自动保存，当你编辑下一个文件的时候，目前正在编辑的文件如果改动，将会自动保存 (automatic write the buffer when you switch to next buffer)<br />\r\n:set noautowrite&nbsp;-&gt; 关闭自动保存 (turn autowrite off)<br />\r\n:hide e abc.txt&nbsp;-&gt; 隐藏当前文件，打开一个新文件 abc.txt进行编辑 (hide the current buffer and edit abc.txt)<br />\r\n:buffers&nbsp;-&gt; 显示所有vim中的文件 (display all buffers)<br />\r\n:buffer2&nbsp;-&gt; 编辑文件中的第二个 (edit buffer 2)\r\n	</p>\r\n	<p>\r\n		vim中很多东西可以用简称来写，就不用打字那么麻烦了，例如 :edit=:e, :next=:n 这样.\r\n	</p>\r\n	<h3>\r\n		分屏 (split)\r\n	</h3>\r\n	<p>\r\n		vim提供了分屏功能（跟screen里面的split一样）<br />\r\n:split&nbsp;-&gt; 将屏幕分成2个 (split screen)<br />\r\n:split abc.txt&nbsp;-&gt; 将屏幕分成两个，第二个新的屏幕中显示abc.txt的内容 (split the windows, on new window, display abc.txt)<br />\r\n:vsplit&nbsp;-&gt; 竖着分屏 (split vertically)<br />\r\n:{d}split&nbsp;-&gt; 设定分屏的行数，例如我要一个屏幕只有20行，就可以下:20split (split the windows with {d} line. 20split: open new windows with 3 lines)<br />\r\n:new&nbsp;-&gt; 分屏并且在新屏中建立一个空白文件 (split windows with a new blank file)<br />\r\nCTRL-w+j/k/h/l&nbsp;-&gt; 利用CTRL加w加上j/k/h/l在不同的屏内切换 (switch, move between split screens)<br />\r\nCTRL-w+ -/+&nbsp;-&gt; 增减分屏的大小 (change split size)<br />\r\nCTRL-w+t&nbsp;-&gt; 移动到最顶端的那个屏 (move to the top windows)<br />\r\nCTRL-w+b&nbsp;-&gt; 移动到最下面的屏 (move to bottom window)<br />\r\n:close&nbsp;-&gt; 关闭一个分出来的屏 (close splited screen)<br />\r\n: only&nbsp;-&gt; 只显示光标当前屏 ，其他将会关闭(only display current active screen, close all others )<br />\r\n:qall&nbsp;-&gt; 退出所有屏 (quite all windows)<br />\r\n:wall&nbsp;-&gt; 保存所有屏 （write to all windows）<br />\r\n:wqall&nbsp;-&gt; 保存并退出所有屏 (write and quite all windows)<br />\r\n:qall!&nbsp;-&gt; 退出所有屏，不保存任何变动 (quite all windows without save)<br />\r\n开启文件的时候，利用 -o选项，就可以直接开启多个文件在分屏中 (with -o option from command line, it will open files and display in split mode)<br />\r\nvim -o a.txt b.txt\r\n	</p>\r\n	<p>\r\n		今天有人说不会看diff，其实vim也可以用来看diff，这个也是属于分屏的部分，这里也写一下。\r\n	</p>\r\n	<p>\r\n		vimdiff a.txt b.txt&nbsp;如果直接给 -d选项是一样的 vim -d a.txt b.txt<br />\r\n:diffsplit \r\nabc.txt&nbsp;如果你现在已经开启了一个文件，想vim帮你区分你的文件跟abc.txt有什么区别，可以在vim中用diffsplit的方式打开第\r\n二个文件，这个时 候vim会用split的方式开启第二个文件，并且通过颜色，fold来显示两个文件的区别<br />\r\n这样vim就会用颜色帮你区分开2个文件的区别。如果文件比较大（源码）重复的部分会帮你折叠起来（折叠后面会说）<br />\r\n现在来说patch<br />\r\n:diffpatch filename&nbsp;通过:diffpatch&nbsp;你的patch的文件名，就可以以当前文件加上你的patch来显示。vim会split一个新的屏，显示patch后的信息并且用颜色标明区别。<br />\r\n如果不喜欢上下对比，喜欢左右（比较符合视觉）可以在前面加vert，例如：<br />\r\n:vert diffsplit abc.txt<br />\r\n:vert diffpatch abc.txt<br />\r\n看完diff，用: only回到原本编辑的文件，觉 得diff的讨厌颜色还是在哪里，只要用:diffoff关闭就好了。<br />\r\n还有个常用的diff中的就是&nbsp;:diffu&nbsp;这个是&nbsp;:diffupdate&nbsp;的简写，更新用\r\n	</p>\r\n	<h3>\r\n		TAB\r\n	</h3>\r\n	<p>\r\n		除了split之外， vim还可以用 tab\r\n	</p>\r\n	<p>\r\n		:tab split filename&nbsp;-&gt; 这个就用tab的方式来显示多个文件 (use tab to display buffers)<br />\r\ngt&nbsp;-&gt; 到下一个tab (go to next tab)<br />\r\ngT&nbsp;-&gt; 到上一个tab (go to previous tab)<br />\r\nvim大多数东西都是可一给数字来执行的，tab也是一样<br />\r\n0gt&nbsp;-&gt;跳到第一个tab (switch to 1st tab)<br />\r\n5gt&nbsp;-&gt; 跳到第五个tab (switch to 5th tab)\r\n	</p>\r\n关闭所有的tab可以使用qall的指令。另外让vim在启动的时候就自动用tabnew的方式来开启多个文件，可以用aliaslinux: 添加 alias vim=’vim -p’ 到 ~/.bashrcwindows: 自己写个vim.bat的文件，然后放在path中，文件内容：@echo offvim -p %*当需要更改多个tab中的文件的时候，可以用&nbsp;:tabdo&nbsp;这个指令 这个就相当于 loop 到你的所有的 tab 中然后运行指令。例如有5个文件都在tab里面，需要更改一个变量名称：abc 到 def， 就可以用 :tabdo %s/abc/def/g 这样所有的5个tab里面的abc就都变成def了&nbsp;\r\n	<h3>\r\n		折叠 (folding)\r\n	</h3>\r\n	<p>\r\n		vim的折叠功能。。。我记得应该是6版出来的时候才推出的吧。这个对于写程序的人来说，非常有用。<br />\r\nzfap&nbsp;-&gt; 按照段落折叠 (fold by paragraph)<br />\r\nzo&nbsp;-&gt; 打开一个折叠 (open fold)<br />\r\nzc&nbsp;-&gt; 关闭一个折叠 (close fold)<br />\r\nzf&nbsp;-&gt; 创建折叠 (create fold) 这个可以用v视觉模式，可以直接给行数等等<br />\r\nzr&nbsp;-&gt; 打开一定数量的折叠，例如3rz (reduce the folding by number like 3zr)<br />\r\nzm&nbsp;-&gt; 折叠一定数量（之前你定义好的折叠） (fold by number)<br />\r\nzR&nbsp;-&gt; 打开所有的折叠 (open all fold)<br />\r\nzM&nbsp;-&gt; 关闭所有的摺叠 (close all fold)<br />\r\nzn&nbsp;-&gt; 关闭折叠功能 (disable fold)<br />\r\nzN&nbsp;-&gt; 开启折叠功能 (enable fold)<br />\r\nzO&nbsp;-&gt; 将光标下所有折叠打开 (open all folds at the cursor line)<br />\r\nzC&nbsp;-&gt; 将光标下所有折叠关闭 (close all fold at cursor line)<br />\r\nzd&nbsp;-&gt; 将光标下的折叠删除，这里不是删除内容，只是删除折叠标记 (delete fold at cursor line)<br />\r\nzD&nbsp;-&gt; 将光标下所有折叠删除 (delete all folds at the cursor line)<br />\r\n按照tab来折叠，python最好用的 (ford by indent, very useful for python)<br />\r\n:set foldmethod=indent&nbsp;-&gt; 设定后用zm&nbsp;跟&nbsp;zr&nbsp;就可以的开关关闭了 (use zm zr)\r\n	</p>\r\n	<h3>\r\n		保存 (save view)\r\n	</h3>\r\n	<p>\r\n		对于vim来说，如果你设定了折叠，但是退出文件，不管是否保持文件，折叠部分会自动消失的。这样来说非常不方便。所以vim给你方法去保存折 \r\n叠，标签，书签等等记录。最厉害的是，vim对于每个文件可以保存最多10个view，也就是说你可以对同一个文件有10种不同的标记方法，根据你的需 \r\n要，这些东西都会保存下来。<br />\r\n:mkview&nbsp;-&gt; 保存记录 (save setting)<br />\r\n:loadview&nbsp;-&gt; 读取记录 (load setting)<br />\r\n:mkview 2&nbsp;-&gt; 保存记录在寄存2 （save view to register 2)<br />\r\n:loadview 3&nbsp;-&gt; 从寄存3中读取记录 (load view from register 3)\r\n	</p>\r\n	<h3>\r\n		常用指令 (commands)\r\n	</h3>\r\n	<p>\r\n		:set ic&nbsp;-&gt;设定为搜索时不区分大小 写 (search case insensitive)<br />\r\n:set noic&nbsp;-&gt;搜索时区分大小写。 vim内定是这个(case sensitive )<br />\r\n&amp;&nbsp;-&gt; 重复上次的”:s” (repeat previous “:s”)<br />\r\n.&nbsp;-&gt; 重复上次的指令 (repeat last command)<br />\r\nK&nbsp;-&gt; 在man中搜索当前光标下的词 (search man page under cursor)<br />\r\n{0-9}K&nbsp;-&gt; 查找当前光标下man中的章节，例如5K就是同等于man 5 (search section of man. 5K search for man 5)<br />\r\n:history&nbsp;-&gt; 查看命令历史记录 (see command line history)<br />\r\nq:&nbsp;-&gt; 打开vim指令窗口 (open vim command windows)<br />\r\n:e&nbsp;-&gt; 打开一个文件，vim可以开启http/ftp/scp的文件 (open file. also works with http/ftp/scp)<br />\r\n:e http://www.google.com/index.html&nbsp;-&gt; 这里就在vim中打开google的index.html (open google’s index.html)<br />\r\n:cd&nbsp;-&gt; 更换vim中的目录 (change current directory in vim)<br />\r\n:pwd&nbsp;-&gt; 显示vim当前目录 (display pwd in vim)<br />\r\ngf&nbsp;-&gt; 打开文件。例如你在vim中有一行写了#include 那么在abc.h上面按gf，vim就会把abc.h这个文件打开 \r\n(look for file. if you have a file with #include , then the cursor is on\r\n abc.h press gf, it will open the file abc.h in vim )\r\n	</p>\r\n	<h3>\r\n		记录指令 (record)\r\n	</h3>\r\n	<p>\r\n		q{a-z}&nbsp;-&gt; 在某个寄存中记录指令 (record typed char into register)<br />\r\nq{A-Z}&nbsp;-&gt; 将指令插入之前的寄存器 (append typed char into register{a-z})<br />\r\nq&nbsp;-&gt; 结束记录 (stop recording)<br />\r\n@{a-z}&nbsp;-&gt; 执行寄存中的指令 (execute recording)<br />\r\n@@&nbsp;-&gt; 重复上次的指令 (repeat previours :@{a-z})<br />\r\n还是给个例子来说明比较容易明白<br />\r\n我现在在一个文件中下qa指令,然后输入itest然后ESC然后q<br />\r\n这里qa就是说把我的指令记录进a寄存，itest实际是分2步，i 是插入 (insert) 写入的文字是 text 然后用ESC退回指令模式q结束记录。这样我就把itest记录再一个寄存了。<br />\r\n下面我执行@a那么就会自动插入test这个词。@@就重复前一个动作，所以还是等于@a\r\n	</p>\r\n	<h3>\r\n		搜索 (search)\r\n	</h3>\r\n	<p>\r\n		vim超级强大的一个功能就是搜索跟替换了。要是熟悉正表达(regular expressions)这个搜索跟后面的替换将会是无敌利器（支持RE的编辑器不多吧）\r\n	</p>\r\n	<p>\r\n		从简单的说起<br />\r\n#&nbsp;-&gt; 光标下反向搜索关键词 (search the word under cursor backward)<br />\r\n*&nbsp;-&gt; 光标下正向搜索关键词 (search the word under cursor forward)<br />\r\n/&nbsp;-&gt; 向下搜索 (search forward)<br />\r\n?&nbsp;-&gt; 向上搜索 (search back)<br />\r\n这里可以用&nbsp;/abc&nbsp;或&nbsp;?abc的方式向上，向下搜索abc<br />\r\n%&nbsp;-&gt; 查找下一个结束，例如在”(“下查找下一个”)”，可以找”()”, “[]” 还有shell中常用的 if, else这些 (find next brace, bracket, comment or #if/#else/#endif)\r\n	</p>\r\n	<p>\r\n		下面直接用几个例子说话<br />\r\n/a*&nbsp;-&gt; 这个会搜到 a aa aaa<br />\r\n/\\(ab\\)*&nbsp;-&gt; 这个会搜到 ab abab ababab<br />\r\n/ab\\+&nbsp;-&gt; 这个会搜到 ab abb abbb<br />\r\n/folers\\=&nbsp;-&gt; 这个会搜到 folder folders<br />\r\n/ab\\{3,5}&nbsp;-&gt; 这个会搜到 abbb abbbb abbbbb<br />\r\n/ab\\{-1,3}&nbsp;-&gt; 这个会在abbb中搜到ab (will match ab in abbb)<br />\r\n/a.\\{-}b&nbsp;-&gt; 这个会在axbxb中搜到axb (match ‘axb’ in ‘axbxb’)<br />\r\n/a.*b&nbsp;-&gt; 会搜索到任何a开头后面有b的 (match a*b any)<br />\r\n/foo\\|bar&nbsp;-&gt; 搜索foo或者bar，就是同时搜索2个词 (match ‘foo’ or ‘bar’)<br />\r\n/one\\|two\\|three&nbsp;-&gt; 搜索3个词 (match ‘one’, ‘two’ or ‘three’)<br />\r\n/\\(foo\\|bar\\)\\+&nbsp;-&gt; 搜索foo, foobar, foofoo, barfoobar等等 (match ‘foo’, ‘foobar’, ‘foofoo’, ‘barfoobar’ … )<br />\r\n/end\\(if\\|while\\|for\\)&nbsp;-&gt; 搜索endif, endwhile endfor (match ‘endif’, ‘endwhile’, ‘endfor’)<br />\r\n/forever\\&amp;…&nbsp;-&gt; 这个会在forever中搜索到”for”但是不会在fortuin中搜索到”for” \r\n因为我们这里给了&amp;…的限制 (match ‘for’ in ‘forever’ will not match ‘fortuin’)\r\n	</p>\r\n	<p>\r\n		特殊字符前面加^就可以 (for special character, user “^” at the start of range)<br />\r\n/”[^\"]*”<br />\r\n这里解释一下<br />\r\n” 双引号先引起来 (double quote)<br />\r\n[^\"] 任何不是双引号的东西(any character that is not a double quote)<br />\r\n* 所有的其他 (as many as possible)<br />\r\n” 结束最前面的引号 (double quote close)<br />\r\n上面那个会搜到“foo” “3!x”这样的包括引号 (match “foo” -&gt; and “3!x” include double quote)\r\n	</p>\r\n	<p>\r\n		更多例子，例如搜索车牌规则，假设车牌是 “1MGU103” 也就是说，第一个是数字，3个大写字幕，3个数字的格式。那么我们可以直接搜索所有符合这个规则的字符<br />\r\n(A sample license plate number is “1MGU103″. It has one digit, three upper case<br />\r\nletters and three digits. Directly putting this into a search pattern)<br />\r\n这个应该很好懂，我们搜索<br />\r\n\\数字\\大写字母\\大写字母\\大写字母\\数字\\数字\\数字\r\n	</p>\r\n	<p>\r\n		/\\d\\u\\u\\u\\d\\d\\d\r\n	</p>\r\n	<p>\r\n		另外一个方法，是直接定义几位数字（不然要是30位，难道打30个\\u去？）<br />\r\n(specify there are three digits and letters with a count)\r\n	</p>\r\n	<p>\r\n		/\\d\\u\\{3}\\d\\{3}\r\n	</p>\r\n	<p>\r\n		也可以用范围来搜索 (Using [] ranges)<br />\r\n/[0-9][A-Z]\\{3}[0-9]\\{3}\r\n	</p>\r\n	<p>\r\n		用到范围搜索，列出一些范围(range)<br />\r\n这个没什么好说了，看一下就都明白了，要全部记住。。。用的多了就记住了，用的少了就忘记了。每次看帮助，呵呵\r\n	</p>\r\n	<p>\r\n		<strong>/[a-z]<br />\r\n/[0123456789abcdef] = /[0-9a-f]<br />\r\n\\e<br />\r\n\\t<br />\r\n\\r<br />\r\n\\b</strong><br />\r\n简写 (item matches equivalent)\r\n	</p>\r\n	<p>\r\n		<strong>\\d digit [0-9]<br />\r\n\\D non-digit [^0-9]<br />\r\n\\x hex digit [0-9a-fA-F]<br />\r\n\\X non-hex digit [^0-9a-fA-F]<br />\r\n\\s white space [ ] ( and )<br />\r\n\\S non-white characters [^ ] (not and )<br />\r\n\\l lowercase alpha [a-z]<br />\r\n\\L non-lowercase alpha [^a-z]<br />\r\n\\u uppercase alpha [A-Z]<br />\r\n\\U non-uppercase alpha [^A-Z]</strong>\r\n	</p>\r\n	<p>\r\n		:help /[]&nbsp;–&gt; 特殊的定义的，可以在vim中用用help来看 (everything about special)<br />\r\n:help /\\s&nbsp;–&gt; 普通的也可以直接看一下 (everything about normal)\r\n	</p>\r\n	<h3>\r\n		替换 (string substitute) – RX\r\n	</h3>\r\n	<p>\r\n		替换其实跟搜索是一样的。只不过替换是2个值，一个是你搜索的东西，一个是搜索到之后要替换的 string substitute (use rx)\r\n	</p>\r\n	<p>\r\n		%s/abc/def/&nbsp;-&gt; 替换abc到def (substitute abc to def)<br />\r\n%s/abc/def/c&nbsp;-&gt; 替换abc到def，会每次都问你确定(substitute on all text with confirmation (y,n,a,q,l))<br />\r\n1,5s/abc/def/g&nbsp;-&gt; 只替换第一行到第15行之间的abc到def (substitute abc to def only between line 1 to 5)<br />\r\n54s/abc/def/&nbsp;-&gt; 只替换第54行的abc到def (only substitute abc to def on line 54)\r\n	</p>\r\n	<p>\r\n		结合上面的搜索正表达式，这个替换功能。。。就十分只强大。linux中很多地方都是用正表达来做事请的，所以学会了受益无穷。\r\n	</p>\r\n	<h3>\r\n		全局 (global)\r\n	</h3>\r\n	<p>\r\n		这个不知道怎么翻译，反正vim是叫做global，可以对搜索到的东西执行一些vim的命令。我也是2-3个星期前因为读log中一些特殊的东 西，才学会用的。 (find the match pater and execute a command)\r\n	</p>\r\n	<p>\r\n		global具体自行方法是&nbsp;g/pattern/command<br />\r\n:g/abc/p&nbsp;-&gt; 查找并显示出只有abc的行 (only print line with “abc” )<br />\r\n:g/abc/d&nbsp;-&gt; 删除所有有abc的行 (delete all line with “abc”)<br />\r\n:v/abc/d&nbsp;-&gt; 这个会把凡是不是行里没有abc的都删掉 (delete all line without “abc”)\r\n	</p>\r\n	<h3>\r\n		信息过滤 (filter)\r\n	</h3>\r\n	<p>\r\n		vim又一强大功能\r\n	</p>\r\n	<p>\r\n		!&nbsp;-&gt; 用!就是告诉vim，执行过滤流程 (tell vim to performing a filter operation)<br />\r\n!5G&nbsp;-&gt; 从光标下向下5行执行过滤程序 (tell vim to start filter under cursor and go down 5 lines)\r\n	</p>\r\n	<p>\r\n		正式指令开始，这里用sort来做例子：<br />\r\n!5Gsort&nbsp;-&gt; 从光标下开始执行sort，一共执行5行，就是说我只要sort5行而已 (this will sort the text from cursor line down to 5 lines)<br />\r\n!Gsort -k3&nbsp;-&gt; 可以直接代sort的参数，我要sort文字中的第三段 (sort to the end of file by column 3)<br />\r\n!!&nbsp;-&gt; 值过滤当前的这行 (filter the current line)\r\n	</p>\r\n	<p>\r\n		如果觉得!这样的方法5G这样的方法用起来别扭（我是这么觉得），可以用标准的命令模式来做<br />\r\n!其实就是个:.,而已 （to type the command）<br />\r\n:.,start,end!sort&nbsp;这里定义:.,起始行，结束行!运行指令<br />\r\n:.,$!sort&nbsp;-&gt; 从当前这行一直执行至文件结束 (sort from current line to end)<br />\r\n:.0,$!sort&nbsp;-&gt; 从文件的开始第一个行一直执行到文件结束 (sort from start of file to end)<br />\r\n:.10,15!sort&nbsp;-&gt; 只在文件的第10行到第15行之间执行 (sort between line 10 to 15)\r\n	</p>\r\n</div>','2013-06-11 10:33:34','2013-06-11 10:33:34'),(22,1,NULL,'linux下进入rails console提示cannot load such file — readline','<div class=\"entry-content\">\r\n	<p>\r\n		在linux下输入rails c，之后提示错误，如下：\r\n	</p>\r\n	<p>\r\n		zs@cdit-0000696b:~/myblog$ rails c\r\n	</p>\r\n/home/zs/.rvm/rubies/ruby-2.0.0-p195/lib/ruby/2.0.0/irb/completion.rb:9:in `require’: cannot load such file — readline (LoadError) from /home/zs/.rvm/rubies/ruby-2.0.0-p195/lib/ruby/2.0.0/irb/completion.rb:9:in `&lt;top (required)&gt;’ from /home/zs/.rvm/gems/ruby-2.0.0-p195/gems/railties-3.2.13/lib/rails/commands/console.rb:3:in `require’ from /home/zs/.rvm/gems/ruby-2.0.0-p195/gems/railties-3.2.13/lib/rails/commands/console.rb:3:in `&lt;top (required)&gt;’ from /home/zs/.rvm/gems/ruby-2.0.0-p195/gems/railties-3.2.13/lib/rails/commands.rb:38:in `require’ from /home/zs/.rvm/gems/ruby-2.0.0-p195/gems/railties-3.2.13/lib/rails/commands.rb:38:in `&lt;top (required)&gt;’ from script/rails:6:in `require’ from script/rails:6:in `&lt;main&gt;’ <br />\r\n需要先安装readline，命令如下：<br />\r\nRuby代码<br />\r\napt-get install libreadline5-dev<br />\r\n再进入到ruby源码中，重新编译readline，命令如下：<br />\r\nRuby代码<br />\r\n$cd ext/readline<br />\r\n$ruby extconf.rb<br />\r\n$make<br />\r\n$sudo make install<br />\r\n即可。\r\n	<p>\r\n		<br />\r\n	</p>\r\n</div>','2013-06-11 10:34:13','2013-06-11 13:22:55'),(23,1,NULL,'ctags跳转到方法的定义处','项目目录下：<br />\r\n下面的命令只包含当期目录的方法<br />\r\n$ctags -R –exclude=.git –exclude=log * –exclude=coverage –exclude=’rvm gemdir’<br />\r\n下面的命令包含了gem的方法<br />\r\n$ctags&nbsp;–extra=+f&nbsp;–exclude=.git&nbsp;–exclude=log&nbsp;-R&nbsp;*&nbsp;`rvm&nbsp;gemdir`/gems/*<br />\r\nCtrl+N补全方法名；<br />\r\n光标到方法名，按Ctrl+]跳转<br />\r\n<a href=\"http://ctags.sourceforge.net/\">http://ctags.sourceforge.net/</a>','2013-06-11 10:34:45','2013-06-11 10:34:45'),(24,1,NULL,'如何实现ubuntu VNC图像化访问','<div class=\"entry-content\">\r\n	<p>\r\n		一．安装<span style=\"font-family:Calibri;\">gnome</span><span style=\"font-family:宋体;\">桌面</span>\r\n	</p>\r\n	<p>\r\n		1.1<span style=\"font-family:宋体;\">更新</span>\r\n	</p>\r\n	<p>\r\n		root@cdit-0000662a:~#&nbsp;apt-get&nbsp;update&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#<span style=\"font-family:宋体;\">很重要</span>\r\n	</p>\r\n	<p>\r\n		1.1<span style=\"font-family:宋体;\">安装</span><span style=\"font-family:Calibri;\">x-window</span>\r\n	</p>\r\n	<p>\r\n		root@cdit-00006628:~#&nbsp;apt-get&nbsp;-y&nbsp;&nbsp;install&nbsp;x-windows-systme-core\r\n	</p>\r\n	<p>\r\n		1.2&nbsp;<span style=\"font-family:宋体;\">安装登陆管理器</span>\r\n	</p>\r\n	<p>\r\n		root@cdit-0000662a:~#&nbsp;apt-get&nbsp;-y&nbsp;install&nbsp;gdm\r\n	</p>\r\n	<p>\r\n		1.3<span style=\"font-family:宋体;\">安装桌面</span>\r\n	</p>\r\n	<p>\r\n		root@cdit-0000662a:~#&nbsp;apt-get&nbsp;-y&nbsp;install&nbsp;ubuntu-desktop\r\n	</p>\r\n	<p>\r\n		1.4<span style=\"font-family:宋体;\">安装</span><span style=\"font-family:Calibri;\">gnome</span><span style=\"font-family:宋体;\">基础</span>\r\n	</p>\r\n	<p>\r\n		root@cdit-0000662a:~#&nbsp;apt-get&nbsp;-y&nbsp;install&nbsp;gnome-core\r\n	</p>\r\n	<p>\r\n		二．安及配置<span style=\"font-family:Calibri;\">vncserver</span>\r\n	</p>\r\n	<p>\r\n		Ubuntu下设置VNCServer\r\n	</p>\r\n	<div id=\"app-share-content\">\r\n		<p>\r\n			Virtual Network \r\nComputing(VNC)是进行远程桌面控制的一个软件。客户端的键盘输入和鼠标操作通过网络传输到远程服务器，控制服务器的操作。服务器的图形界面\r\n 通过网络传输会客户端显示给用户。给你的感觉就像直接在操作本地计算机一样，只是所有的程序和命令都是在服务器端执行。<br />\r\n1、打开一个Terminal window<br />\r\n2、下载 vnc4server ：<br />\r\nsudo apt-get install vnc4server\r\n		</p>\r\n		<p>\r\n			3、启动vnc4server：<br />\r\nvnc4server<br />\r\n此时系统会提示你输入密码，在通过客户端链接时将会用到这个密码。<br />\r\n输入完密码后你将看到类似下边的提示：\r\n		</p>\r\n		<p>\r\n			New ‘****3 (****)’ desktop is ****:3 (****代表主机名）\r\n		</p>\r\n		<p>\r\n			Take notice of the number after the colon (, in this case it is “3.”\r\n		</p>\r\n		<p>\r\n			启动完vnc4server后在你的主目录下将会产生一个.vnc的目录。<br />\r\n此时就可以通过vnc客户端链接到服务器了。<br />\r\n4、停止一个vnc4server<br />\r\nvnc4server -kill :3<br />\r\n根据你启动时获得的数字替换此处的3。<br />\r\n5、打开 .vnc/xstartup 文件并编辑：<br />\r\ngedit /.vnc/xstartup<br />\r\n文件看起来将是这样的：<br />\r\n#!/bin/sh<br />\r\n# Uncomment the following two lines for normal desktop:<br />\r\n# unset SESSION_MANAGER<br />\r\n# exec /etc/X11/xinit/xinitrc<br />\r\n[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup<br />\r\n[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources<br />\r\nxsetroot -solid grey<br />\r\nvnccon** -iconic &amp;<br />\r\nx-terminal-emulator -geometry 80×24+10+10 -ls -title “$VNCDESKTOP Desktop” &amp;<br />\r\nx-window-manager &amp;<br />\r\n6、修改 .vnc/xstartup文件并保存<br />\r\n取消unset和exec开始的行的注释，注释以xsetroot，vnccon**，xterm和twm开始的行。执行后看起来像这样：<br />\r\n#!/bin/sh<br />\r\n# Uncomment the following two lines for normal desktop:<br />\r\nunset SESSION_MANAGER<br />\r\nexec /etc/X11/xinit/xinitrc<br />\r\n[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup<br />\r\n[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresources<br />\r\n#xsetroot -solid grey<br />\r\n#vnccon** -iconic &amp;<br />\r\n#x-terminal-emulator -geometry 80×24+10+10 -ls -title “$VNCDESKTOP Desktop” &amp;<br />\r\n#x-window-manager &amp;\r\n		</p>\r\n		<p>\r\n			7、修改/etc/X11/xinit/xinitrc文件的许可，使其可执行：<br />\r\nsudo chmod 755 /etc/X11/xinit/xinitrc<br />\r\n8、启动vnc4server：<br />\r\nvnc4server<br />\r\n注意：记住此处冒号后提示的数字<br />\r\n9、从另外的电脑登录这台服务器：<br />\r\nvncviewer remote-server:3<br />\r\n按照提示输入你在第三部输入的密码，成功进入远程桌面。\r\n		</p>\r\n		<p>\r\n			10、若前面执行失败导致在VNC下看不到图形界面，鼠标变成”X”形状，请查看第七条是否执行过，同时将刚建过的VNCServer删掉，vncserver -kill :1(1代表前面启动的vncserver序号)\r\n		</p>\r\n		<p>\r\n			11、Ubuntu \r\n10.10下增添了对Windows键的定义，在里面被定义为Super键，当用户在VNC下按下字母”d”时，会被错误的当做返回桌面的快捷方式导致d\r\n无法被输入，此时可修改快捷键方式来避免此bug，新打开一个终端，在里面输入：gconf-editor，这样会弹出一个对话框，到\r\n“Apps-&gt;Metacity-&gt;Global keybingdings”中找“show \r\ndesktop”，将其默认值&lt;Super&gt;D改为&lt;Ctl&gt;&lt;Alt&gt;D即可。\r\n		</p>\r\n	</div>\r\n</div>','2013-06-11 10:35:11','2013-06-11 10:35:11'),(25,1,NULL,'ruby版本切换不了的问题','$rvm use 2.0.0<br />\r\n出现如下错误<br />\r\n<br />\r\nRVM is not a function, selecting rubies with \'rvm use ...\' will not work.<br />\r\nYou need to change your terminal emulator preferences to allow login shell.<br />\r\nSometimes it is required to use `/bin/bash --login` as the command.<br />\r\nPlease visit https://rvm.io/integration/gnome-terminal/ for a example<br />\r\n<br />\r\n解决方法：<br />\r\n配置终端：<br />\r\n<p>\r\n	勾选：以登录shell的方式运行命令\r\n</p>\r\n<p>\r\n	<img src=\"http://zhusan.qiniudn.com/fcda895c9eb6.png?token=aWtMOlR4a40Vh4mLPfs2z8g9MK3fBfvvcdGU_E-R:l7wMtQi7znhMJLl61imBYoYseV4=:eyJTIjoiKi8qIiwiRSI6MTM3MDk2MjI4MX0=\" alt=\"\" height=\"169\" width=\"300\" /> \r\n</p>','2013-06-11 10:36:29','2013-06-11 13:51:31'),(26,1,NULL,'rails i18n国际化配置文件','<div class=\"entry-content\">\r\n	<p>\r\n		rails i18n国际化配置文件：\r\n	</p>\r\n	<p>\r\n		https://github.com/svenfuchs/rails-i18n.git\r\n	</p>\r\n	<p>\r\n		Add to your Gemfile:<br />\r\ngem ‘rails-i18n’<br />\r\nconfig/application.rb中加入：\r\n	</p>\r\n	<p>\r\n<pre class=\"prettyprint lang-rb\">config.i18n.default_locale = “zh-CN”</pre>\r\n	</p>\r\n</div>','2013-06-11 10:40:26','2013-06-11 13:35:15');
/*!40000 ALTER TABLE `blogs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `blog_id` int(11) DEFAULT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `content` text COLLATE utf8_unicode_ci,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_comments_on_blog_id` (`blog_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `kindeditor_assets`
--

DROP TABLE IF EXISTS `kindeditor_assets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `kindeditor_assets` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `asset` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `file_size` int(11) DEFAULT NULL,
  `file_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `kindeditor_assets`
--

LOCK TABLES `kindeditor_assets` WRITE;
/*!40000 ALTER TABLE `kindeditor_assets` DISABLE KEYS */;
INSERT INTO `kindeditor_assets` VALUES (1,'fcda895c9eb6.png',48983,'image/png','2013-06-11 10:38:42','2013-06-11 10:38:42');
/*!40000 ALTER TABLE `kindeditor_assets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_migrations`
--

DROP TABLE IF EXISTS `schema_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `schema_migrations` (
  `version` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  UNIQUE KEY `unique_schema_migrations` (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('20130523084335'),('20130525095137'),('20130525154238'),('20130530141442'),('20130605014450');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `taggings`
--

DROP TABLE IF EXISTS `taggings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `taggings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tag_id` int(11) DEFAULT NULL,
  `taggable_id` int(11) DEFAULT NULL,
  `taggable_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `tagger_id` int(11) DEFAULT NULL,
  `tagger_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `context` varchar(128) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_taggings_on_tag_id` (`tag_id`),
  KEY `index_taggings_on_taggable_id_and_taggable_type_and_context` (`taggable_id`,`taggable_type`,`context`)
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `taggings`
--

LOCK TABLES `taggings` WRITE;
/*!40000 ALTER TABLE `taggings` DISABLE KEYS */;
INSERT INTO `taggings` VALUES (1,1,1,'Blog',NULL,NULL,'tags','2013-06-11 10:07:25'),(2,2,2,'Blog',NULL,NULL,'tags','2013-06-11 10:09:18'),(3,2,3,'Blog',NULL,NULL,'tags','2013-06-11 10:10:48'),(4,3,4,'Blog',NULL,NULL,'tags','2013-06-11 10:12:12'),(5,2,5,'Blog',NULL,NULL,'tags','2013-06-11 10:15:15'),(6,4,6,'Blog',NULL,NULL,'tags','2013-06-11 10:16:16'),(7,2,7,'Blog',NULL,NULL,'tags','2013-06-11 10:17:48'),(8,5,8,'Blog',NULL,NULL,'tags','2013-06-11 10:18:55'),(9,5,9,'Blog',NULL,NULL,'tags','2013-06-11 10:20:42'),(10,2,10,'Blog',NULL,NULL,'tags','2013-06-11 10:21:39'),(11,5,11,'Blog',NULL,NULL,'tags','2013-06-11 10:22:24'),(12,4,11,'Blog',NULL,NULL,'tags','2013-06-11 10:22:24'),(13,5,12,'Blog',NULL,NULL,'tags','2013-06-11 10:22:54'),(14,6,13,'Blog',NULL,NULL,'tags','2013-06-11 10:23:33'),(15,6,14,'Blog',NULL,NULL,'tags','2013-06-11 10:24:33'),(16,1,14,'Blog',NULL,NULL,'tags','2013-06-11 10:24:33'),(17,5,15,'Blog',NULL,NULL,'tags','2013-06-11 10:25:55'),(18,6,16,'Blog',NULL,NULL,'tags','2013-06-11 10:27:14'),(19,4,16,'Blog',NULL,NULL,'tags','2013-06-11 10:27:14'),(20,1,16,'Blog',NULL,NULL,'tags','2013-06-11 10:27:14'),(21,7,17,'Blog',NULL,NULL,'tags','2013-06-11 10:27:47'),(22,4,18,'Blog',NULL,NULL,'tags','2013-06-11 10:30:37'),(23,1,18,'Blog',NULL,NULL,'tags','2013-06-11 10:30:37'),(24,6,19,'Blog',NULL,NULL,'tags','2013-06-11 10:31:23'),(25,1,19,'Blog',NULL,NULL,'tags','2013-06-11 10:31:23'),(26,5,20,'Blog',NULL,NULL,'tags','2013-06-11 10:32:27'),(27,6,20,'Blog',NULL,NULL,'tags','2013-06-11 10:32:27'),(28,1,20,'Blog',NULL,NULL,'tags','2013-06-11 10:32:27'),(29,7,21,'Blog',NULL,NULL,'tags','2013-06-11 10:33:34'),(30,6,22,'Blog',NULL,NULL,'tags','2013-06-11 10:34:13'),(31,5,22,'Blog',NULL,NULL,'tags','2013-06-11 10:34:13'),(32,7,23,'Blog',NULL,NULL,'tags','2013-06-11 10:34:46'),(33,6,24,'Blog',NULL,NULL,'tags','2013-06-11 10:35:11'),(34,5,25,'Blog',NULL,NULL,'tags','2013-06-11 10:36:29'),(35,6,25,'Blog',NULL,NULL,'tags','2013-06-11 10:36:29'),(36,5,26,'Blog',NULL,NULL,'tags','2013-06-11 10:40:26');
/*!40000 ALTER TABLE `taggings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'转载'),(2,'android'),(3,'js'),(4,'mysql'),(5,'rails'),(6,'linux'),(7,'vim');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `login` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `hashed_password` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `salt` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'zhusan','23becd134108d140e9e6c3e288e4a7c78189663ff8608fc40858d05f6aa23c65','jof4863kj7m0169rdl2','zhusan','2013-06-11 08:21:47','2013-06-11 08:21:47');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-06-11 23:47:46
